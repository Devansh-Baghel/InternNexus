/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SinkRouteImport } from './routes/sink'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as OnboardingRouteImport } from './routes/onboarding'
import { Route as LoginRouteImport } from './routes/login'
import { Route as L2RouteImport } from './routes/l2'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as InternshipInternshipIdRouteImport } from './routes/internship.$internshipId'

const SinkRoute = SinkRouteImport.update({
  id: '/sink',
  path: '/sink',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingRoute = OnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const L2Route = L2RouteImport.update({
  id: '/l2',
  path: '/l2',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InternshipInternshipIdRoute = InternshipInternshipIdRouteImport.update({
  id: '/internship/$internshipId',
  path: '/internship/$internshipId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/l2': typeof L2Route
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/sink': typeof SinkRoute
  '/internship/$internshipId': typeof InternshipInternshipIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/l2': typeof L2Route
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/sink': typeof SinkRoute
  '/internship/$internshipId': typeof InternshipInternshipIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/l2': typeof L2Route
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/sink': typeof SinkRoute
  '/internship/$internshipId': typeof InternshipInternshipIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/l2'
    | '/login'
    | '/onboarding'
    | '/profile'
    | '/register'
    | '/sink'
    | '/internship/$internshipId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/l2'
    | '/login'
    | '/onboarding'
    | '/profile'
    | '/register'
    | '/sink'
    | '/internship/$internshipId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/l2'
    | '/login'
    | '/onboarding'
    | '/profile'
    | '/register'
    | '/sink'
    | '/internship/$internshipId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  L2Route: typeof L2Route
  LoginRoute: typeof LoginRoute
  OnboardingRoute: typeof OnboardingRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  SinkRoute: typeof SinkRoute
  InternshipInternshipIdRoute: typeof InternshipInternshipIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sink': {
      id: '/sink'
      path: '/sink'
      fullPath: '/sink'
      preLoaderRoute: typeof SinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/l2': {
      id: '/l2'
      path: '/l2'
      fullPath: '/l2'
      preLoaderRoute: typeof L2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/internship/$internshipId': {
      id: '/internship/$internshipId'
      path: '/internship/$internshipId'
      fullPath: '/internship/$internshipId'
      preLoaderRoute: typeof InternshipInternshipIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  L2Route: L2Route,
  LoginRoute: LoginRoute,
  OnboardingRoute: OnboardingRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  SinkRoute: SinkRoute,
  InternshipInternshipIdRoute: InternshipInternshipIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
