Directory structure:
└── InternNexus/
    ├── README.md
    ├── backend/
    │   ├── package.json
    │   ├── public/
    │   │   └── temp/
    │   │       └── .gitkeep
    │   └── src/
    │       ├── app.js
    │       ├── constants.js
    │       ├── index.js
    │       ├── controllers/
    │       │   └── user.controller.js
    │       ├── db/
    │       │   └── db.js
    │       ├── middlewares/
    │       │   ├── auth.middleware.js
    │       │   └── multer.middleware.js
    │       ├── models/
    │       │   └── user.model.js
    │       ├── routes/
    │       │   └── user.routes.js
    │       └── utils/
    │           ├── apiError.js
    │           ├── apiResponse.js
    │           ├── asyncHandler.js
    │           └── cloudinary.js
    └── frontend/
        ├── README.md
        ├── components.json
        ├── index.html
        ├── package.json
        ├── tsconfig.json
        ├── vite.config.ts
        ├── .cta.json
        ├── .cursorrules
        ├── public/
        │   ├── manifest.json
        │   └── robots.txt
        └── src/
            ├── main.tsx
            ├── reportWebVitals.ts
            ├── routeTree.gen.ts
            ├── styles.css
            ├── components/
            │   └── Header.tsx
            ├── lib/
            │   └── utils.ts
            ├── routes/
            │   ├── __root.tsx
            │   ├── dashboard.tsx
            │   ├── index.tsx
            │   ├── internship.$internshipId.tsx
            │   ├── l2.tsx
            │   ├── login.tsx
            │   ├── onboarding.tsx
            │   ├── profile.tsx
            │   ├── register.tsx
            │   └── sink.tsx
            └── utils/
                └── utils.ts

================================================
FILE: README.md
================================================
# InternNexus



================================================
FILE: backend/package.json
================================================
{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "nodemon -r dotenv/config src/index",
    "start": "node -r dotenv/config src/index"
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cloudinary": "^2.1.0",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.3.1",
    "multer": "2.0.2",
    "stripe": "^14.25.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}



================================================
FILE: backend/public/temp/.gitkeep
================================================
keep



================================================
FILE: backend/src/app.js
================================================
import express from "express";
import cors from "cors";
import cookieParser from "cookie-parser";

const app = express();

app.use(
  cors({
    origin: [
      process.env.CORS_ORIGIN,
      "http://localhost:5173",
      "https://spendsync.baghel.dev",
      "tauri://localhost",
    ],
    credentials: true,
  })
);

app.use(express.json({ limit: "16kb" }));
app.use(express.urlencoded({ extended: true, limit: "16kb" }));
app.use(express.static("public"));
app.use(cookieParser());

// Routes
import userRouter from "./routes/user.routes.js";
import goalRouter from "./routes/goal.routes.js";
import feedbackRouter from "./routes/feedback.routes.js";
import transactionRouter from "./routes/transaction.routes.js";
import demoRouter from "./routes/demo.routes.js";
import payRouter from "./routes/payment.routes.js";
import statsRouter from "./routes/stats.routes.js";

app.use("/api/v1/users", userRouter);
app.use("/api/v1/goals", goalRouter);
app.use("/api/v1/feedback", feedbackRouter);
app.use("/api/v1/transaction", transactionRouter);
app.use("/api/v1/demo", demoRouter);
app.use("/api/v1/pay", payRouter);
app.use("/api/v1/stats", statsRouter);

export default app;



================================================
FILE: backend/src/constants.js
================================================
export const DB_NAME = "expense-tracker";
export const PORT = process.env.PORT || 3000;



================================================
FILE: backend/src/index.js
================================================
import dotenv from "dotenv";
import connectDB from "./db/db.js";
import app from "./app.js";
import { PORT } from "./constants.js";

dotenv.config({
  path: "../.env",
});

connectDB()
  .then(() => {
    app.listen(PORT, () => {
      console.log(`Server Running on Port: ${PORT}`);
    });
  })
  .catch((err) => {
    console.error("MongoDB Connection failed !!!", err);
  });



================================================
FILE: backend/src/controllers/user.controller.js
================================================
import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { User } from "../models/user.model.js";
import jwt from "jsonwebtoken";
import { uploadOnCloudinary } from "../utils/cloudinary.js";

const generateAccessAndRefreshTokens = async (userId) => {
  try {
    const user = await User.findById(userId);
    const accessToken = user.generateAccessToken();
    const refreshToken = user.generateRefreshToken();

    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false });

    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(
      500,
      "Something went wrong while generating access and refresh tokens"
    );
  }
};

export const registerUser = asyncHandler(async (req, res) => {
  const { fullName, email, password } = req.body;

  if (!fullName) throw new ApiError(400, "Fullname is required");
  if (!password) throw new ApiError(400, "Password is required");
  if (!email) throw new ApiError(400, "Email is required");

  const emailExists = await User.findOne({ email });
  if (emailExists) throw new ApiError(409, "Email has already been used");

  const user = await User.create({
    fullName,
    email,
    password,
  });

  const createdUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  if (!createdUser)
    throw new ApiError(500, "Something went wrong while registering the user");

  return res
    .status(201)
    .json(new ApiResponse(200, createdUser, "User registered sucessfully"));
});

export const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  if (!email) throw new ApiError(400, "Email required");
  if (!password) throw new ApiError(400, "Password required");

  const user = await User.findOne({ email });

  if (!user) throw new ApiError(404, "User not found");

  const isPasswordValid = await user.isPasswordCorrect(password);

  if (!isPasswordValid) throw new ApiError(401, "Invalid Password");

  const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(
    user._id
  );

  const loggedInUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  const options = {
    httpOnly: true,
    secure: true,
    sameSite: "none",
  };

  return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
      new ApiResponse(
        200,
        {
          user: loggedInUser,
          accessToken,
          refreshToken,
        },
        "User logged in successfully"
      )
    );
});

export const logoutUser = asyncHandler(async (req, res) => {
  await User.findByIdAndUpdate(
    req.user._id,
    {
      $set: {
        refreshToken: undefined,
      },
    },
    {
      new: true,
    }
  );

  const options = {
    httpOnly: true,
    secure: true,
  };

  return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json(new ApiResponse(200, {}, "User logged out"));
});

export const addIncomeAndExpense = asyncHandler(async (req, res) => {
  const { income, expense } = req.body;
  const user = req.user;

  if (income === undefined)
    throw new ApiError(400, "Income is required to add income and expense");
  if (expense === undefined)
    throw new ApiError(400, "Expense is required to add income and expense");

  if (isNaN(income) || isNaN(expense))
    throw new ApiError(400, "Income and Expense must be a number");

  if (income < 0 || expense < 0)
    throw new ApiError(400, "Income and Expense can't be less than zero");

  if (expense > income)
    throw new ApiError(400, "Expense can't be greater than income");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      hasSetIncomeAndExpense: true,
      income,
      expense,
    },
    { new: true }
  ).select("-password -refreshToken");

  if (!updatedUser) throw new ApiError(404, "User not found");

  return res.status(200).json(
    new ApiResponse(
      200,
      {
        user: updatedUser,
      },
      "Income and expense added successfully"
    )
  );
});

export const refreshAccessToken = asyncHandler(async (req, res) => {
  const incomingRefreshToken =
    req.cookies.refreshToken || req.body.refreshToken;
  if (!incomingRefreshToken) throw new ApiError(401, "Unauthorized request");

  const decodedToken = jwt.verify(
    incomingRefreshToken,
    process.env.REFRESH_TOKEN_SECRET
  );

  const user = await User.findById(decodedToken?._id);

  if (!user) throw new ApiError(401, "Invalid refresh token");

  if (incomingRefreshToken !== user?.refreshToken)
    throw new ApiError(401, "Refresh token is expired or used");

  const options = {
    httpOnly: true,
    secure: true,
  };

  const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(
    user._id
  );

  return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
      new ApiResponse(
        200,
        {
          accessToken,
          refreshToken,
        },
        "Access token refreshed"
      )
    );
});

export const initialDeposit = asyncHandler(async (req, res) => {
  const user = req.user;
  const { depositAmount } = req.body;

  if (!depositAmount) throw new ApiError(400, "Deposit amount is required");
  if (isNaN(depositAmount))
    throw new ApiError(400, "Deposit amount must be a number");
  if (depositAmount < 1)
    throw new ApiError(400, "Deposit amount must be at least 1");
  if (user.currentBalance !== 0)
    throw new ApiError(400, "User already has money in their account");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      currentBalance: depositAmount,
    },
    {
      new: true,
    }
  ).select("-password -refreshToken");

  return res
    .status(200)
    .json(new ApiResponse(200, { user: updatedUser }, "Initial deposit added"));
});

export const updateAccountBalance = asyncHandler(async (req, res) => {
  const user = req.user;
  const { newAmount } = req.body;

  if (!newAmount) throw new ApiError(400, "New amount is required");
  if (isNaN(newAmount)) throw new ApiError(400, "New amount must be a number");
  if (newAmount < 1) throw new ApiError(400, "New amount must be at least 1");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      currentBalance: newAmount,
    },
    {
      new: true,
    }
  ).select("-password -refreshToken");

  return res
    .status(200)
    .json(
      new ApiResponse(200, { user: updatedUser }, "Updated account balance")
    );
});

export const updateDate = asyncHandler(async (req, res) => {
  const { date } = req.body;
  const user = req.user;

  if (!date) throw new ApiError(400, "Date is required");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    { dateOfBirth: date },
    { new: true }
  ).select("-password -refreshToken");
  if (!updatedUser) throw new ApiError(404, "User not found");

  return res
    .status(200)
    .json(new ApiResponse(200, { user: updatedUser }, "Date of birth added"));
});

export const updateUserDetails = asyncHandler(async (req, res) => {
  const user = req.user;
  const { name, bio } = req.body;

  const updateFields = {};
  if (name) updateFields.fullName = name;
  if (bio) updateFields.bio = bio;

  const updatedUser = await User.findByIdAndUpdate(user._id, updateFields, {
    new: true,
  }).select("-password -refreshToken");

  if (!updatedUser) throw new ApiError(404, "User doesn't exist");

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        { user: updatedUser },
        "Updated user fields successfully"
      )
    );
});

export const uploadAvatar = asyncHandler(async (req, res) => {
  const avatarLocalPath = req.file.path;
  const user = req.user;

  if (!avatarLocalPath) throw new ApiError(400, "Avatar file is required");

  const avatar = await uploadOnCloudinary(avatarLocalPath);

  if (!avatar) throw new ApiError(400, "Avatar file is required");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    { avatar: avatar.url },
    { new: true }
  ).select("-password -refreshToken");

  if (!updatedUser)
    throw new ApiError(500, "Something went wrong uploading avatar");

  return res
    .status(200)
    .json(
      new ApiResponse(200, { user: updatedUser }, "Avatar uploaded sucessfully")
    );
});

export const changeCurrentPassword = asyncHandler(async (req, res) => {
  const { oldPassword, newPassword } = req.body;

  if (!oldPassword || !newPassword)
    throw new ApiError(400, "Both old and new passwords are required");

  const user = await User.findById(req.user?._id);
  const isPasswordCorrect = await user.isPasswordCorrect(oldPassword);

  if (!isPasswordCorrect) {
    throw new ApiError(401, "Invalid old password");
  }

  user.password = newPassword;
  await user.save({ validateBeforeSave: false });

  return res
    .status(200)
    .json(new ApiResponse(200, {}, "Password changed successfully"));
});

export const updateCurrency = asyncHandler(async (req, res) => {
  const user = req.user;
  const { newCurrency } = req.body;

  if (!newCurrency) throw new ApiError(400, "New currency is required");

  if (!["$", "€", "¥", "₹", "A$", "C$"].includes(newCurrency))
    throw new ApiError(400, "Currency is not supported");

  user.currency = newCurrency;
  await user.save();

  return res
    .status(200)
    .json(new ApiResponse(200, { user }, "Currency updated successfully"));
});

export const getCurrentUser = asyncHandler(async (req, res) => {
  return res
    .status(200)
    .json(
      new ApiResponse(200, { user: req.user }, "User fetched successfully")
    );
});



================================================
FILE: backend/src/db/db.js
================================================
import mongoose from "mongoose";
import { DB_NAME } from "../constants.js";

async function connectDB() {
  try {
    const connectionInstance = await mongoose.connect(
      `${process.env.MONGO_URL}/${DB_NAME}`,
      {
        writeConcern: { w: "majority" },
      },
    );
    console.log(
      `\nMongoDB connected !! DB HOST: ${connectionInstance.connection.host}`,
    );
  } catch (error) {
    console.error("MONGODB connection error: ", error);
    throw error;
  }
}

export default connectDB;



================================================
FILE: backend/src/middlewares/auth.middleware.js
================================================
import { ApiError } from "../utils/apiError.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import jwt from "jsonwebtoken";
import { User } from "../models/user.model.js";

export const verifyJWT = asyncHandler(async (req, res, next) => {
  try {
    const token =
      req.cookies?.accessToken ||
      req.header("Authorization")?.replace("Bearer ", "");

    if (!token) throw new ApiError(401, "Unauthorized request");

    const decodedToken = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);

    const user = await User.findById(decodedToken?._id).select(
      "-password -refreshToken",
    );

    if (!user) throw new ApiError(401, "Invalid Access Token");

    req.user = user;
    next();
  } catch (error) {
    throw new ApiError(401, error?.message || "Invalid access token");
  }
});



================================================
FILE: backend/src/middlewares/multer.middleware.js
================================================
import multer from "multer";

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "./public/temp");
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

export const upload = multer({ storage });



================================================
FILE: backend/src/models/user.model.js
================================================
import mongoose, { Schema } from "mongoose";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const userSchema = mongoose.Schema(
  {
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    fullName: {
      type: String,
      required: true,
      trim: true,
      index: true,
    },
    transactionHistory: [
      {
        type: Schema.Types.ObjectId,
        ref: "Transaction",
      },
    ],
    goals: [
      {
        type: Schema.Types.ObjectId,
        ref: "Goal",
      },
    ],
    isPaidUser: {
      type: Boolean,
      default: false,
    },
    stripeSessionId: { type: String },
    password: {
      type: String,
      required: [true, "Password is required"],
    },
    currentBalance: {
      type: Number,
      default: 0,
    },
    refershToken: {
      type: String,
    },
    hasSetIncomeAndExpense: {
      type: Boolean,
      default: false,
    },
    income: {
      type: Number,
      min: 0,
    },
    expense: {
      type: Number,
      min: 0,
    },
    avatar: {
      type: String,
    },
    bio: {
      type: String,
    },
    dateOfBirth: {
      type: Date,
    },
    currency: {
      type: String,
      default: "$",
      enum: ["$", "€", "¥", "₹", "A$", "C$"],
    },
  },
  { timestamps: true }
);

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

userSchema.methods.isPasswordCorrect = async function (password) {
  return await bcrypt.compare(password, this.password);
};

userSchema.methods.generateAccessToken = function () {
  return jwt.sign(
    {
      _id: this._id,
      email: this.email,
      fullName: this.fullName,
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
      expiresIn: process.env.ACCESS_TOKEN_EXPIRY,
    }
  );
};

userSchema.methods.generateRefreshToken = function () {
  return jwt.sign(
    {
      _id: this._id,
    },
    process.env.REFRESH_TOKEN_SECRET,
    {
      expiresIn: process.env.REFRESH_TOKEN_EXPIRY,
    }
  );
};

export const User = mongoose.model("User", userSchema);



================================================
FILE: backend/src/routes/user.routes.js
================================================
import { Router } from "express";
import {
  registerUser,
  loginUser,
  logoutUser,
  addIncomeAndExpense,
  refreshAccessToken,
  initialDeposit,
  updateAccountBalance,
  updateDate,
  updateUserDetails,
  uploadAvatar,
  changeCurrentPassword,
  updateCurrency,
  getCurrentUser,
} from "../controllers/user.controller.js";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import { upload } from "../middlewares/multer.middleware.js";

const router = Router();

router.route("/register").post(registerUser);

router.route("/login").post(loginUser);

// secured routes
router.route("/logout").post(verifyJWT, logoutUser);
router.route("/add-income-and-expense").post(verifyJWT, addIncomeAndExpense);
router.route("/refresh-access-token").post(verifyJWT, refreshAccessToken);
router.route("/initial-deposit").post(verifyJWT, initialDeposit);
router.route("/update-account-balance").post(verifyJWT, updateAccountBalance);
router.route("/update-date").post(verifyJWT, updateDate);
router.route("/update-details").post(verifyJWT, updateUserDetails);
router
  .route("/upload-avatar")
  .post(verifyJWT, upload.single("avatar"), uploadAvatar);
router.route("/update-password").post(verifyJWT, changeCurrentPassword);
router.route("/update-currency").post(verifyJWT, updateCurrency);
router.route("/get-current-user").get(verifyJWT, getCurrentUser);

export default router;



================================================
FILE: backend/src/utils/apiError.js
================================================
class ApiError extends Error {
  constructor(
    statusCode,
    message = "Something went wrong",
    errors = [],
    stack = "",
  ) {
    super(message);
    this.statusCode = statusCode;
    this.data = null;
    this.message = message;
    this.success = false;
    this.errors = errors;

    if (stack) {
      this.stack = stack;
    } else {
      Error.captureStackTrace(this, this.constructor);
    }
  }
}

export { ApiError };



================================================
FILE: backend/src/utils/apiResponse.js
================================================
class ApiResponse {
  constructor(statusCode, data, message = "success") {
    this.statusCode = statusCode;
    this.data = data;
    this.message = message;
    this.success = statusCode < 400;
  }
}

export { ApiResponse };



================================================
FILE: backend/src/utils/asyncHandler.js
================================================
const asyncHandler = (requestHandler) => {
  return (req, res, next) => {
    Promise.resolve(requestHandler(req, res, next)).catch((err) => next(err));
  };
};

export { asyncHandler };



================================================
FILE: backend/src/utils/cloudinary.js
================================================
import { v2 as cloudinary } from "cloudinary";
import fs from "fs";

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

const uploadOnCloudinary = async (localFilePath) => {
  try {
    if (!localFilePath) return null;
    const response = await cloudinary.uploader.upload(localFilePath, {
      resource_type: "auto",
    });

    // console.log(
    //   "File has been successfully uploaded on cloudinary",
    //   response.url
    // );

    fs.unlinkSync(localFilePath);
    return response;
  } catch (error) {
    fs.unlinkSync(localFilePath); // remove temp file as upload operation failed
    return null;
  }
};

export { uploadOnCloudinary };



================================================
FILE: frontend/README.md
================================================
Welcome to your new TanStack app! 

# Getting Started

To run this application:

```bash
bun install
bunx --bun run start
```

# Building For Production

To build this application for production:

```bash
bunx --bun run build
```

## Testing

This project uses [Vitest](https://vitest.dev/) for testing. You can run the tests with:

```bash
bunx --bun run test
```

## Styling

This project uses [Tailwind CSS](https://tailwindcss.com/) for styling.



## Shadcn

Add components using the latest version of [Shadcn](https://ui.shadcn.com/).

```bash
pnpx shadcn@latest add button
```



## Routing
This project uses [TanStack Router](https://tanstack.com/router). The initial setup is a file based router. Which means that the routes are managed as files in `src/routes`.

### Adding A Route

To add a new route to your application just add another a new file in the `./src/routes` directory.

TanStack will automatically generate the content of the route file for you.

Now that you have two routes you can use a `Link` component to navigate between them.

### Adding Links

To use SPA (Single Page Application) navigation you will need to import the `Link` component from `@tanstack/react-router`.

```tsx
import { Link } from "@tanstack/react-router";
```

Then anywhere in your JSX you can use it like so:

```tsx
<Link to="/about">About</Link>
```

This will create a link that will navigate to the `/about` route.

More information on the `Link` component can be found in the [Link documentation](https://tanstack.com/router/v1/docs/framework/react/api/router/linkComponent).

### Using A Layout

In the File Based Routing setup the layout is located in `src/routes/__root.tsx`. Anything you add to the root route will appear in all the routes. The route content will appear in the JSX where you use the `<Outlet />` component.

Here is an example layout that includes a header:

```tsx
import { Outlet, createRootRoute } from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'

import { Link } from "@tanstack/react-router";

export const Route = createRootRoute({
  component: () => (
    <>
      <header>
        <nav>
          <Link to="/">Home</Link>
          <Link to="/about">About</Link>
        </nav>
      </header>
      <Outlet />
      <TanStackRouterDevtools />
    </>
  ),
})
```

The `<TanStackRouterDevtools />` component is not required so you can remove it if you don't want it in your layout.

More information on layouts can be found in the [Layouts documentation](https://tanstack.com/router/latest/docs/framework/react/guide/routing-concepts#layouts).


## Data Fetching

There are multiple ways to fetch data in your application. You can use TanStack Query to fetch data from a server. But you can also use the `loader` functionality built into TanStack Router to load the data for a route before it's rendered.

For example:

```tsx
const peopleRoute = createRoute({
  getParentRoute: () => rootRoute,
  path: "/people",
  loader: async () => {
    const response = await fetch("https://swapi.dev/api/people");
    return response.json() as Promise<{
      results: {
        name: string;
      }[];
    }>;
  },
  component: () => {
    const data = peopleRoute.useLoaderData();
    return (
      <ul>
        {data.results.map((person) => (
          <li key={person.name}>{person.name}</li>
        ))}
      </ul>
    );
  },
});
```

Loaders simplify your data fetching logic dramatically. Check out more information in the [Loader documentation](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#loader-parameters).

### React-Query

React-Query is an excellent addition or alternative to route loading and integrating it into you application is a breeze.

First add your dependencies:

```bash
bun install @tanstack/react-query @tanstack/react-query-devtools
```

Next we'll need to create a query client and provider. We recommend putting those in `main.tsx`.

```tsx
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

// ...

const queryClient = new QueryClient();

// ...

if (!rootElement.innerHTML) {
  const root = ReactDOM.createRoot(rootElement);

  root.render(
    <QueryClientProvider client={queryClient}>
      <RouterProvider router={router} />
    </QueryClientProvider>
  );
}
```

You can also add TanStack Query Devtools to the root route (optional).

```tsx
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";

const rootRoute = createRootRoute({
  component: () => (
    <>
      <Outlet />
      <ReactQueryDevtools buttonPosition="top-right" />
      <TanStackRouterDevtools />
    </>
  ),
});
```

Now you can use `useQuery` to fetch your data.

```tsx
import { useQuery } from "@tanstack/react-query";

import "./App.css";

function App() {
  const { data } = useQuery({
    queryKey: ["people"],
    queryFn: () =>
      fetch("https://swapi.dev/api/people")
        .then((res) => res.json())
        .then((data) => data.results as { name: string }[]),
    initialData: [],
  });

  return (
    <div>
      <ul>
        {data.map((person) => (
          <li key={person.name}>{person.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

You can find out everything you need to know on how to use React-Query in the [React-Query documentation](https://tanstack.com/query/latest/docs/framework/react/overview).

## State Management

Another common requirement for React applications is state management. There are many options for state management in React. TanStack Store provides a great starting point for your project.

First you need to add TanStack Store as a dependency:

```bash
bun install @tanstack/store
```

Now let's create a simple counter in the `src/App.tsx` file as a demonstration.

```tsx
import { useStore } from "@tanstack/react-store";
import { Store } from "@tanstack/store";
import "./App.css";

const countStore = new Store(0);

function App() {
  const count = useStore(countStore);
  return (
    <div>
      <button onClick={() => countStore.setState((n) => n + 1)}>
        Increment - {count}
      </button>
    </div>
  );
}

export default App;
```

One of the many nice features of TanStack Store is the ability to derive state from other state. That derived state will update when the base state updates.

Let's check this out by doubling the count using derived state.

```tsx
import { useStore } from "@tanstack/react-store";
import { Store, Derived } from "@tanstack/store";
import "./App.css";

const countStore = new Store(0);

const doubledStore = new Derived({
  fn: () => countStore.state * 2,
  deps: [countStore],
});
doubledStore.mount();

function App() {
  const count = useStore(countStore);
  const doubledCount = useStore(doubledStore);

  return (
    <div>
      <button onClick={() => countStore.setState((n) => n + 1)}>
        Increment - {count}
      </button>
      <div>Doubled - {doubledCount}</div>
    </div>
  );
}

export default App;
```

We use the `Derived` class to create a new store that is derived from another store. The `Derived` class has a `mount` method that will start the derived store updating.

Once we've created the derived store we can use it in the `App` component just like we would any other store using the `useStore` hook.

You can find out everything you need to know on how to use TanStack Store in the [TanStack Store documentation](https://tanstack.com/store/latest).

# Demo files

Files prefixed with `demo` can be safely deleted. They are there to provide a starting point for you to play around with the features you've installed.

# Learn More

You can learn more about all of the offerings from TanStack in the [TanStack documentation](https://tanstack.com).



================================================
FILE: frontend/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
FILE: frontend/index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-tsrouter-app"
    />
    <link rel="apple-touch-icon" href="/logo192.png" />
    <link rel="manifest" href="/manifest.json" />
    <title>Create TanStack App - client</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: frontend/package.json
================================================
{
  "name": "client",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite --port 3000",
    "start": "vite --port 3000",
    "build": "vite build && tsc",
    "serve": "vite preview",
    "test": "vitest run"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.0.6",
    "@tanstack/react-devtools": "^0.2.2",
    "@tanstack/react-router": "^1.130.2",
    "@tanstack/react-router-devtools": "^1.131.5",
    "@tanstack/router-plugin": "^1.121.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.476.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.0.2",
    "tailwindcss": "^4.0.6",
    "tw-animate-css": "^1.3.6"
  },
  "devDependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/react": "^16.2.0",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "jsdom": "^26.0.0",
    "typescript": "^5.7.2",
    "vite": "^6.3.5",
    "vitest": "^3.0.5",
    "web-vitals": "^4.2.4"
  }
}


================================================
FILE: frontend/tsconfig.json
================================================
{
  "include": ["**/*.ts", "**/*.tsx"],
  "compilerOptions": {
    "target": "ES2022",
    "jsx": "react-jsx",
    "module": "ESNext",
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "types": ["vite/client"],

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    /* Linting */
    "skipLibCheck": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
    }
  }
}



================================================
FILE: frontend/vite.config.ts
================================================
import { defineConfig } from 'vite'
import viteReact from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

import { TanStackRouterVite } from '@tanstack/router-plugin/vite'
import { resolve } from 'node:path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    TanStackRouterVite({ autoCodeSplitting: true }),
    viteReact(),
    tailwindcss(),
  ],
  test: {
    globals: true,
    environment: 'jsdom',
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
    },
  },
})



================================================
FILE: frontend/.cta.json
================================================
{
  "projectName": "client",
  "mode": "file-router",
  "typescript": true,
  "tailwind": true,
  "packageManager": "bun",
  "git": true,
  "version": 1,
  "framework": "react-cra",
  "chosenAddOns": [
    "shadcn"
  ]
}


================================================
FILE: frontend/.cursorrules
================================================
# shadcn instructions

Use the latest version of Shadcn to install new components, like this command to add a button component:

```bash
pnpx shadcn@latest add button
```



================================================
FILE: frontend/public/manifest.json
================================================
{
  "short_name": "TanStack App",
  "name": "Create TanStack App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}



================================================
FILE: frontend/public/robots.txt
================================================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:



================================================
FILE: frontend/src/main.tsx
================================================
import { StrictMode } from 'react'
import ReactDOM from 'react-dom/client'
import { RouterProvider, createRouter } from '@tanstack/react-router'

// Import the generated route tree
import { routeTree } from './routeTree.gen'

import './styles.css'
import reportWebVitals from './reportWebVitals.ts'

// Create a new router instance
const router = createRouter({
  routeTree,
  context: {},
  defaultPreload: 'intent',
  scrollRestoration: true,
  defaultStructuralSharing: true,
  defaultPreloadStaleTime: 0,
})

// Register the router instance for type safety
declare module '@tanstack/react-router' {
  interface Register {
    router: typeof router
  }
}

// Render the app
const rootElement = document.getElementById('app')
if (rootElement && !rootElement.innerHTML) {
  const root = ReactDOM.createRoot(rootElement)
  root.render(
    <StrictMode>
      <RouterProvider router={router} />
    </StrictMode>,
  )
}

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals()



================================================
FILE: frontend/src/reportWebVitals.ts
================================================
const reportWebVitals = (onPerfEntry?: () => void) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ onCLS, onINP, onFCP, onLCP, onTTFB }) => {
      onCLS(onPerfEntry)
      onINP(onPerfEntry)
      onFCP(onPerfEntry)
      onLCP(onPerfEntry)
      onTTFB(onPerfEntry)
    })
  }
}

export default reportWebVitals



================================================
FILE: frontend/src/routeTree.gen.ts
================================================
/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SinkRouteImport } from './routes/sink'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as OnboardingRouteImport } from './routes/onboarding'
import { Route as LoginRouteImport } from './routes/login'
import { Route as L2RouteImport } from './routes/l2'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as InternshipInternshipIdRouteImport } from './routes/internship.$internshipId'

const SinkRoute = SinkRouteImport.update({
  id: '/sink',
  path: '/sink',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingRoute = OnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const L2Route = L2RouteImport.update({
  id: '/l2',
  path: '/l2',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InternshipInternshipIdRoute = InternshipInternshipIdRouteImport.update({
  id: '/internship/$internshipId',
  path: '/internship/$internshipId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/l2': typeof L2Route
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/sink': typeof SinkRoute
  '/internship/$internshipId': typeof InternshipInternshipIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/l2': typeof L2Route
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/sink': typeof SinkRoute
  '/internship/$internshipId': typeof InternshipInternshipIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/l2': typeof L2Route
  '/login': typeof LoginRoute
  '/onboarding': typeof OnboardingRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/sink': typeof SinkRoute
  '/internship/$internshipId': typeof InternshipInternshipIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/l2'
    | '/login'
    | '/onboarding'
    | '/profile'
    | '/register'
    | '/sink'
    | '/internship/$internshipId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/l2'
    | '/login'
    | '/onboarding'
    | '/profile'
    | '/register'
    | '/sink'
    | '/internship/$internshipId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/l2'
    | '/login'
    | '/onboarding'
    | '/profile'
    | '/register'
    | '/sink'
    | '/internship/$internshipId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  L2Route: typeof L2Route
  LoginRoute: typeof LoginRoute
  OnboardingRoute: typeof OnboardingRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  SinkRoute: typeof SinkRoute
  InternshipInternshipIdRoute: typeof InternshipInternshipIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sink': {
      id: '/sink'
      path: '/sink'
      fullPath: '/sink'
      preLoaderRoute: typeof SinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/l2': {
      id: '/l2'
      path: '/l2'
      fullPath: '/l2'
      preLoaderRoute: typeof L2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/internship/$internshipId': {
      id: '/internship/$internshipId'
      path: '/internship/$internshipId'
      fullPath: '/internship/$internshipId'
      preLoaderRoute: typeof InternshipInternshipIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  L2Route: L2Route,
  LoginRoute: LoginRoute,
  OnboardingRoute: OnboardingRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  SinkRoute: SinkRoute,
  InternshipInternshipIdRoute: InternshipInternshipIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()



================================================
FILE: frontend/src/styles.css
================================================
@import 'tailwindcss';

@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

body {
  @apply m-0;
  font-family:
    -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',
    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family:
    source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.871 0.006 286.286);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.871 0.006 286.286);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.141 0.005 285.823);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.141 0.005 285.823);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.274 0.006 286.033);
  --input: oklch(0.274 0.006 286.033);
  --ring: oklch(0.442 0.017 285.786);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.274 0.006 286.033);
  --sidebar-ring: oklch(0.442 0.017 285.786);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
FILE: frontend/src/components/Header.tsx
================================================
import { Link } from '@tanstack/react-router'

export default function Header() {
  return (
    <header className="p-2 flex gap-2 bg-white text-black justify-between">
      <nav className="flex flex-row">
        <div className="px-2 font-bold">
          <Link to="/">Home</Link>
        </div>
      </nav>
    </header>
  )
}



================================================
FILE: frontend/src/lib/utils.ts
================================================
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================
FILE: frontend/src/routes/__root.tsx
================================================
import { Outlet, createRootRoute } from '@tanstack/react-router'
import { TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'
import { TanstackDevtools } from '@tanstack/react-devtools'

// import Header from '../components/Header'

export const Route = createRootRoute({
  component: () => (
    <>
      {/* <Header /> */}
      <Outlet />
      <TanstackDevtools
        config={{
          position: 'bottom-left',
        }}
        plugins={[
          {
            name: 'Tanstack Router',
            render: <TanStackRouterDevtoolsPanel />,
          },
        ]}
      />
    </>
  ),
})



================================================
FILE: frontend/src/routes/dashboard.tsx
================================================
import { createFileRoute, useNavigate } from "@tanstack/react-router";
import { useState } from "react";
import { mockInternships } from "../utils/utils";
import {
  ChevronRight,
  Users,
  Target,
  MapPin,
  BookOpen,
  Star,
  Menu,
  X,
  ArrowRight,
  CheckCircle,
  User,
  Settings,
  LogOut,
  Search,
  Filter,
  Heart,
  ExternalLink,
  Calendar,
  Clock,
  Briefcase,
  GraduationCap,
  Phone,
  Mail,
  Home,
  Sparkles,
  TrendingUp,
  Award,
  Zap,
} from "lucide-react";
import { InternshipCard } from "./internship.$internshipId";

export const Route = createFileRoute("/dashboard")({
  component: Dashboard,
});

const mockUser = {
  name: "Priya Sharma",
  email: "priya.sharma@example.com",
  education: "B.Tech Computer Science",
  location: "Mumbai, Maharashtra",
  skills: ["JavaScript", "React", "Node.js"],
  interests: ["Technology", "Startups"],
};

// Dashboard Component
const Dashboard = () => {
  const user = mockUser;
  const navigate = useNavigate();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterRemote, setFilterRemote] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState("all");

  const filteredInternships = mockInternships.filter((internship) => {
    const matchesSearch =
      internship.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      internship.company.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesRemote = !filterRemote || internship.remote;
    const matchesFilter =
      selectedFilter === "all" ||
      (selectedFilter === "featured" && internship.featured);

    return matchesSearch && matchesRemote && matchesFilter;
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-pink-50 to-green-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>

      {/* Enhanced Navigation with Glass Effect */}
      <nav className="fixed w-full z-50 bg-white/90 backdrop-blur-xl border-b border-orange-100 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div className="ml-4">
                  <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
                    InternNexus
                  </span>
                  <div className="text-xs text-gray-500 font-medium">
                    Powered by PM Scheme
                  </div>
                </div>
              </div>
            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:block">
              <div className="flex items-center space-x-8">
                <button
                  onClick={() => navigate({ to: "/dashboard" })}
                  className="text-orange-600 hover:text-orange-700 transition-colors font-bold border-b-2 border-orange-600"
                >
                  Dashboard
                </button>
                <button
                  onClick={() => navigate({ to: "/profile" })}
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Profile
                </button>
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-orange-400 via-pink-400 to-green-400 rounded-full flex items-center justify-center shadow-md">
                    <span className="text-white font-bold">
                      {user?.name?.charAt(0)}
                    </span>
                  </div>
                  <div className="text-left">
                    <div className="text-sm font-semibold text-gray-900">
                      {user?.name}
                    </div>
                    <div className="text-xs text-gray-500">{user?.location}</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="text-gray-700 hover:text-orange-600 transition-colors"
              >
                {isMenuOpen ? (
                  <X className="w-6 h-6" />
                ) : (
                  <Menu className="w-6 h-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Enhanced Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden bg-white/95 backdrop-blur-xl border-t border-orange-100 shadow-xl">
            <div className="px-4 pt-4 pb-6 space-y-4">
              <div className="flex items-center space-x-3 pb-4 border-b border-orange-100">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-400 via-pink-400 to-green-400 rounded-full flex items-center justify-center shadow-lg">
                  <span className="text-white font-bold text-lg">
                    {user?.name?.charAt(0)}
                  </span>
                </div>
                <div>
                  <div className="font-bold text-gray-900">{user?.name}</div>
                  <div className="text-sm text-gray-500">{user?.email}</div>
                  <div className="text-xs text-gray-400">{user?.location}</div>
                </div>
              </div>
              
              <button
                onClick={() => {
                  navigate({ to: "/dashboard" });
                  setIsMenuOpen(false);
                }}
                className="block w-full text-left px-4 py-3 text-orange-600 font-bold hover:bg-orange-50 rounded-xl transition-all"
              >
                Dashboard
              </button>
              
              <button
                onClick={() => {
                  navigate({ to: "/profile" });
                  setIsMenuOpen(false);
                }}
                className="block w-full text-left px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                Profile
              </button>
            </div>
          </div>
        )}
      </nav>

      {/* Main Content */}
      <div className="pt-24 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Welcome Section */}
        <div className="mb-12 text-center">
          <div className="inline-flex items-center bg-gradient-to-r from-orange-100 via-pink-100 to-green-100 border border-orange-200 px-6 py-3 rounded-full shadow-lg mb-6">
            <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-green-500 rounded-full flex items-center justify-center mr-3">
              <Sparkles className="w-4 h-4 text-white" />
            </div>
            <span className="text-sm font-semibold bg-gradient-to-r from-orange-600 to-green-600 bg-clip-text text-transparent">
              Your Personal Dashboard
            </span>
          </div>
          
          <h1 className="text-4xl md:text-5xl lg:text-6xl font-black text-gray-900 mb-4 leading-tight">
            Welcome back,
            <span className="block bg-gradient-to-r from-orange-500 via-pink-500 to-green-500 bg-clip-text text-transparent">
              {user?.name || "User"}! 👋
            </span>
          </h1>
          
          <p className="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
            Here are your personalized internship recommendations powered by our 
            <span className="font-bold text-orange-600"> AI engine</span>
          </p>
        </div>

        {/* Enhanced Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
          <div className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl border border-orange-200 hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 hover:border-transparent relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-br from-orange-400 to-pink-500 opacity-0 group-hover:opacity-5 transition-opacity duration-500"></div>
            <div className="w-16 h-16 bg-gradient-to-r from-orange-400 to-pink-500 rounded-2xl flex items-center justify-center mb-4 mx-auto text-white group-hover:scale-110 transition-transform duration-300 shadow-lg">
              <Target className="w-8 h-8" />
            </div>
            <div className="text-4xl font-black text-gray-900 mb-2 group-hover:scale-105 transition-transform text-center">
              5
            </div>
            <div className="font-bold text-gray-800 mb-1 text-center">
              Smart Recommendations
            </div>
            <div className="text-sm text-gray-600 text-center">
              AI-powered matches
            </div>
          </div>

          <div className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl border border-green-200 hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 hover:border-transparent relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-br from-green-400 to-emerald-500 opacity-0 group-hover:opacity-5 transition-opacity duration-500"></div>
            <div className="w-16 h-16 bg-gradient-to-r from-green-400 to-emerald-500 rounded-2xl flex items-center justify-center mb-4 mx-auto text-white group-hover:scale-110 transition-transform duration-300 shadow-lg">
              <Briefcase className="w-8 h-8" />
            </div>
            <div className="text-4xl font-black text-gray-900 mb-2 group-hover:scale-105 transition-transform text-center">
              2
            </div>
            <div className="font-bold text-gray-800 mb-1 text-center">
              Applications Sent
            </div>
            <div className="text-sm text-gray-600 text-center">
              In progress
            </div>
          </div>

          <div className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl border border-blue-200 hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 hover:border-transparent relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-br from-blue-400 to-indigo-500 opacity-0 group-hover:opacity-5 transition-opacity duration-500"></div>
            <div className="w-16 h-16 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-2xl flex items-center justify-center mb-4 mx-auto text-white group-hover:scale-110 transition-transform duration-300 shadow-lg">
              <Users className="w-8 h-8" />
            </div>
            <div className="text-4xl font-black text-gray-900 mb-2 group-hover:scale-105 transition-transform text-center">
              3
            </div>
            <div className="font-bold text-gray-800 mb-1 text-center">
              Interview Invites
            </div>
            <div className="text-sm text-gray-600 text-center">
              Scheduled
            </div>
          </div>

          <div className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl border border-purple-200 hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 hover:border-transparent relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-br from-purple-400 to-violet-500 opacity-0 group-hover:opacity-5 transition-opacity duration-500"></div>
            <div className="w-16 h-16 bg-gradient-to-r from-purple-400 to-violet-500 rounded-2xl flex items-center justify-center mb-4 mx-auto text-white group-hover:scale-110 transition-transform duration-300 shadow-lg">
              <Star className="w-8 h-8" />
            </div>
            <div className="text-4xl font-black text-gray-900 mb-2 group-hover:scale-105 transition-transform text-center">
              95%
            </div>
            <div className="font-bold text-gray-800 mb-1 text-center">
              Profile Match
            </div>
            <div className="text-sm text-gray-600 text-center">
              Compatibility score
            </div>
          </div>
        </div>

        {/* Enhanced Search and Filters */}
        <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200 mb-12">
          <div className="flex flex-col lg:flex-row gap-6">
            <div className="flex-1 relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-6 h-6" />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search internships by role, company, or skills..."
                className="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 bg-white shadow-inner text-lg"
              />
            </div>

            <div className="flex gap-4">
              <button
                onClick={() =>
                  setSelectedFilter(
                    selectedFilter === "all" ? "featured" : "all"
                  )
                }
                className={`group px-6 py-4 rounded-2xl font-bold transition-all duration-300 flex items-center shadow-lg ${
                  selectedFilter === "featured"
                    ? "bg-gradient-to-r from-orange-500 to-pink-500 text-white transform -translate-y-1 shadow-2xl"
                    : "bg-white text-gray-700 hover:bg-gray-50 hover:-translate-y-1"
                }`}
              >
                <Star className={`w-5 h-5 mr-2 ${selectedFilter === "featured" ? "animate-pulse" : ""}`} />
                Featured
              </button>

              <button
                onClick={() => setFilterRemote(!filterRemote)}
                className={`group px-6 py-4 rounded-2xl font-bold transition-all duration-300 shadow-lg ${
                  filterRemote
                    ? "bg-gradient-to-r from-green-500 to-emerald-500 text-white transform -translate-y-1 shadow-2xl"
                    : "bg-white text-gray-700 hover:bg-gray-50 hover:-translate-y-1"
                }`}
              >
                <Zap className={`w-5 h-5 mr-2 ${filterRemote ? "animate-pulse" : ""}`} />
                Remote Only
              </button>
            </div>
          </div>
        </div>

        {/* Internship Cards */}
        <div className="space-y-8">
          {filteredInternships.map((internship) => (
            <div
              key={internship.id}
              onClick={() =>
                navigate({
                  to: "/internship/$internshipId",
                  params: { internshipId: internship.id },
                })
              }
              className="group bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200 hover:shadow-2xl hover:-translate-y-2 transition-all duration-500 cursor-pointer hover:border-orange-200 relative overflow-hidden"
            >
              <div className="absolute inset-0 bg-gradient-to-br from-orange-400/5 to-green-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              
              <InternshipCard
                internship={internship}
                onClick={() => {}}
              />
            </div>
          ))}
        </div>

        {filteredInternships.length === 0 && (
          <div className="text-center py-20">
            <div className="w-20 h-20 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
              <Search className="w-10 h-10 text-gray-400" />
            </div>
            <h3 className="text-2xl font-bold text-gray-900 mb-3">
              No internships found
            </h3>
            <p className="text-lg text-gray-600 mb-8 max-w-md mx-auto">
              Try adjusting your search terms or filter criteria to discover more opportunities
            </p>
            <button
              onClick={() => {
                setSearchTerm("");
                setFilterRemote(false);
                setSelectedFilter("all");
              }}
              className="bg-gradient-to-r from-orange-500 to-pink-500 text-white px-8 py-4 rounded-2xl font-bold hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300"
            >
              Clear All Filters
            </button>
          </div>
        )}
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/routes/index.tsx
================================================
import { useState, useEffect } from "react";
import { useNavigate, createFileRoute } from "@tanstack/react-router";
import {
  ChevronRight,
  Users,
  Target,
  MapPin,
  BookOpen,
  Star,
  Menu,
  X,
  ArrowRight,
  CheckCircle,
  Zap,
  TrendingUp,
  Globe,
  Shield,
  Sparkles,
  Brain,
  Heart,
  Award,
  Rocket,
  IndianRupee,
  GraduationCap,
  Building,
  UserCheck,
  Clock,
  Smartphone,
  Languages,
  BarChart3,
  PieChart,
  Activity,
} from "lucide-react";

export const Route = createFileRoute("/")({
  component: LandingPage,
});

function LandingPage() {
  const navigate = useNavigate();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [currentTestimonial, setCurrentTestimonial] = useState(0);
  const [animatedStats, setAnimatedStats] = useState({
    students: 0,
    companies: 0,
    cities: 0,
    success: 0,
  });

  // Animated counter for stats
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimatedStats({
        students: 10000,
        companies: 2500,
        cities: 500,
        success: 95,
      });
    }, 500);
    return () => clearTimeout(timer);
  }, []);

  // Auto-rotate testimonials
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);
    }, 4000);
    return () => clearInterval(interval);
  }, []);

  const impactMetrics = [
    {
      icon: <Users className="w-8 h-8" />,
      number: "1.2L+",
      label: "Youth Empowered",
      description: "Across rural India",
      color: "from-blue-500 to-cyan-500",
    },
    {
      icon: <Building className="w-8 h-8" />,
      number: "5000+",
      label: "Partner Companies",
      description: "From startups to Fortune 500",
      color: "from-purple-500 to-pink-500",
    },
    {
      icon: <MapPin className="w-8 h-8" />,
      number: "750+",
      label: "Districts Covered",
      description: "Including tribal & remote areas",
      color: "from-green-500 to-emerald-500",
    },
    {
      icon: <IndianRupee className="w-8 h-8" />,
      number: "₹850Cr+",
      label: "Total Stipends",
      description: "Paid to interns nationwide",
      color: "from-orange-500 to-red-500",
    },
  ];

  const aiFeatures = [
    {
      icon: <Brain className="w-12 h-12" />,
      title: "Smart Profile Analysis",
      description:
        "AI analyzes 50+ data points including skills, education, location, and aspirations to create your unique profile",
      benefits: [
        "Academic background assessment",
        "Skill gap analysis",
        "Career aspiration mapping",
      ],
      color: "from-purple-500 to-violet-600",
    },
    {
      icon: <Target className="w-12 h-12" />,
      title: "Precision Matching",
      description:
        "Advanced algorithms match you with internships that have 95% compatibility with your profile and goals",
      benefits: [
        "Location-based filtering",
        "Industry preference matching",
        "Skill requirement analysis",
      ],
      color: "from-blue-500 to-indigo-600",
    },
    {
      icon: <Zap className="w-12 h-12" />,
      title: "Instant Recommendations",
      description:
        "Get personalized internship suggestions in under 3 seconds, optimized for mobile and low-bandwidth areas",
      benefits: [
        "Real-time processing",
        "Offline capability",
        "Multi-language support",
      ],
      color: "from-amber-500 to-orange-600",
    },
    {
      icon: <TrendingUp className="w-12 h-12" />,
      title: "Success Prediction",
      description:
        "AI predicts your success probability for each internship, helping you make informed decisions",
      benefits: [
        "Success rate analysis",
        "Career growth prediction",
        "Skill development insights",
      ],
      color: "from-green-500 to-teal-600",
    },
  ];

  const testimonials = [
    {
      name: "Priya Sharma",
      location: "Jharkhand",
      background: "First-generation graduate",
      quote:
        "InternNexus helped me find my dream internship at a tech company. As someone from a tribal area, I never thought this was possible!",
      company: "TechCorp India",
      avatar: "PS",
    },
    {
      name: "Rahul Kumar",
      location: "Uttar Pradesh",
      background: "Rural background",
      quote:
        "The AI perfectly matched my skills with opportunities I didn't even know existed. Now I'm working at a Fortune 500 company!",
      company: "Global Solutions Ltd",
      avatar: "RK",
    },
    {
      name: "Sneha Patel",
      location: "Gujarat",
      background: "Engineering student",
      quote:
        "Simple interface, smart recommendations. Found my internship in just 2 clicks. The mobile app works perfectly even with slow internet.",
      company: "Innovation Labs",
      avatar: "SP",
    },
  ];

  const processSteps = [
    {
      step: "01",
      title: "Smart Onboarding",
      description: "Simple 3-minute setup that works on any device",
      icon: <UserCheck className="w-8 h-8" />,
      features: [
        "Multi-language support",
        "Voice input option",
        "Offline capability",
      ],
    },
    {
      step: "02",
      title: "AI Analysis",
      description: "Advanced algorithms analyze your unique profile",
      icon: <Brain className="w-8 h-8" />,
      features: [
        "50+ data points",
        "Regional considerations",
        "Skills assessment",
      ],
    },
    {
      step: "03",
      title: "Perfect Matches",
      description: "Receive 3-5 highly compatible internship recommendations",
      icon: <Target className="w-8 h-8" />,
      features: [
        "95% accuracy rate",
        "Success prediction",
        "Growth potential analysis",
      ],
    },
    {
      step: "04",
      title: "Success Support",
      description: "Continuous guidance throughout your internship journey",
      icon: <Rocket className="w-8 h-8" />,
      features: ["Mentor connections", "Skill development", "Career guidance"],
    },
  ];

  return (
    <div className="min-h-screen overflow-x-hidden">
      {/* Enhanced Navigation with Glass Effect */}
      <nav className="fixed w-full z-50 bg-white/90 backdrop-blur-xl border-b border-orange-100 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div className="ml-4">
                  <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
                    InternNexus
                  </span>
                  <div className="text-xs text-gray-500 font-medium">
                    Powered by PM Scheme
                  </div>
                </div>
              </div>
            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:block">
              <div className="flex items-center space-x-8">
                <a
                  href="#impact"
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Impact
                </a>
                <a
                  href="#ai-features"
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  AI Features
                </a>
                <a
                  href="#process"
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  How It Works
                </a>
                <a
                  href="#success"
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Success Stories
                </a>
                <button
                  onClick={() => navigate({ to: "/login" })}
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Login
                </button>
                <button
                  onClick={() => navigate({ to: "/register" })}
                  className="bg-gradient-to-r from-orange-500 to-pink-500 text-white px-8 py-3 rounded-full font-semibold hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center"
                >
                  Start Your Journey
                  <Sparkles className="ml-2 w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="text-gray-700 hover:text-orange-600 transition-colors"
              >
                {isMenuOpen ? (
                  <X className="w-6 h-6" />
                ) : (
                  <Menu className="w-6 h-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Enhanced Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden bg-white/95 backdrop-blur-xl border-t border-orange-100 shadow-xl">
            <div className="px-4 pt-4 pb-6 space-y-4">
              <a
                href="#impact"
                className="block px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                Impact
              </a>
              <a
                href="#ai-features"
                className="block px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                AI Features
              </a>
              <a
                href="#process"
                className="block px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                How It Works
              </a>
              <a
                href="#success"
                className="block px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                Success Stories
              </a>
              <button
                onClick={() => navigate({ to: "/login" })}
                className="block w-full text-left px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                Login
              </button>
              <button
                onClick={() => navigate({ to: "/register" })}
                className="block w-full mt-4 bg-gradient-to-r from-orange-500 to-pink-500 text-white px-6 py-4 rounded-xl font-semibold shadow-lg"
              >
                Start Your Journey
              </button>
            </div>
          </div>
        )}
      </nav>

      {/* Revolutionary Hero Section */}
      <section className="pt-32 pb-20 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
        {/* Animated Background Elements */}
        <div className="absolute inset-0 -z-10">
          <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
        </div>

        <div className="max-w-7xl mx-auto text-center">
          {/* Government Badge */}
          <div className="flex justify-center mb-8">
            <div className="bg-gradient-to-r from-orange-100 via-white to-green-100 border border-orange-200 px-6 py-3 rounded-full shadow-lg">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-green-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-xs font-bold">🇮🇳</span>
                </div>
                <span className="text-sm font-semibold bg-gradient-to-r from-orange-600 to-green-600 bg-clip-text text-transparent">
                  Official PM Internship Scheme Partner
                </span>
                <Award className="w-5 h-5 text-amber-500" />
              </div>
            </div>
          </div>

          {/* Main Headline */}
          <h1 className="text-5xl md:text-7xl lg:text-8xl font-black text-gray-900 mb-8 leading-tight">
            <span className="block">Transform Your</span>
            <span className="block bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 bg-clip-text text-transparent animate-pulse">
              Career Dreams
            </span>
            <span className="block">Into Reality</span>
          </h1>

          {/* Powerful Subtitle */}
          <p className="text-xl md:text-2xl text-gray-600 mb-12 max-w-4xl mx-auto leading-relaxed font-medium">
            India's most advanced AI-powered internship platform connects
            <span className="font-bold text-orange-600"> 1.2 lakh+ youth </span>
            from rural areas, tribal districts, and remote colleges with
            <span className="font-bold text-green-600">
              {" "}
              life-changing opportunities
            </span>
          </p>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-6 justify-center mb-16">
            <button
              onClick={() => navigate({ to: "/register" })}
              className="group bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white px-12 py-5 rounded-2xl font-bold text-lg hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-300 flex items-center justify-center"
            >
              <Rocket className="mr-3 w-6 h-6 group-hover:animate-pulse" />
              Start Your Journey Now
              <ArrowRight className="ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform" />
            </button>
            <button
              onClick={() => navigate({ to: "/dashboard" })}
              className="group border-2 border-gray-300 text-gray-700 px-12 py-5 rounded-2xl font-bold text-lg hover:border-orange-500 hover:text-orange-500 hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center"
            >
              <Activity className="mr-3 w-6 h-6" />
              Explore Demo
              <Sparkles className="ml-3 w-6 h-6 group-hover:animate-spin" />
            </button>
          </div>

          {/* Animated Impact Metrics */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
            {impactMetrics.map((metric, index) => (
              <div
                key={index}
                className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl border border-gray-200 hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 hover:border-transparent"
                style={{
                  background: `linear-gradient(135deg, white 0%, transparent 100%), linear-gradient(135deg, ${metric.color.split(" ")[1]} 0%, ${metric.color.split(" ")[3]} 100%)`,
                  backgroundBlendMode: "overlay",
                }}
              >
                <div
                  className={`w-16 h-16 bg-gradient-to-r ${metric.color} rounded-2xl flex items-center justify-center mb-4 mx-auto text-white group-hover:scale-110 transition-transform duration-300`}
                >
                  {metric.icon}
                </div>
                <div className="text-3xl md:text-4xl font-black text-gray-900 mb-2 group-hover:scale-105 transition-transform">
                  {metric.number}
                </div>
                <div className="font-bold text-gray-800 mb-1">
                  {metric.label}
                </div>
                <div className="text-sm text-gray-600">
                  {metric.description}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* AI-Powered Features Section */}
      <section
        id="ai-features"
        className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-gray-50 to-blue-50"
      >
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-20">
            <div className="inline-flex items-center bg-gradient-to-r from-purple-100 to-blue-100 px-6 py-3 rounded-full mb-6">
              <Brain className="w-6 h-6 text-purple-600 mr-2" />
              <span className="font-semibold text-purple-800">
                Powered by Advanced AI
              </span>
            </div>
            <h2 className="text-4xl md:text-6xl font-black text-gray-900 mb-6">
              Intelligence That
              <span className="block bg-gradient-to-r from-purple-500 to-blue-500 bg-clip-text text-transparent">
                Changes Lives
              </span>
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
              Our cutting-edge AI doesn't just match jobs – it understands
              dreams, analyzes potential, and creates pathways to success for
              India's most underserved communities.
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
            {aiFeatures.map((feature, index) => (
              <div
                key={index}
                className="group bg-white p-8 rounded-3xl shadow-xl hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 border border-gray-100 hover:border-transparent overflow-hidden relative"
              >
                <div
                  className={`absolute inset-0 bg-gradient-to-br ${feature.color} opacity-0 group-hover:opacity-5 transition-opacity duration-500`}
                ></div>
                <div
                  className={`w-20 h-20 bg-gradient-to-r ${feature.color} rounded-2xl flex items-center justify-center mb-6 text-white group-hover:scale-110 transition-transform duration-300`}
                >
                  {feature.icon}
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:from-purple-600 group-hover:to-blue-600 group-hover:bg-clip-text transition-all duration-300">
                  {feature.title}
                </h3>
                <p className="text-gray-600 leading-relaxed mb-6 text-lg">
                  {feature.description}
                </p>
                <div className="space-y-3">
                  {feature.benefits.map((benefit, idx) => (
                    <div key={idx} className="flex items-center text-gray-700">
                      <CheckCircle className="w-5 h-5 text-green-500 mr-3 flex-shrink-0" />
                      <span className="font-medium">{benefit}</span>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* How It Works - Process Section */}
      <section id="process" className="py-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-20">
            <div className="inline-flex items-center bg-gradient-to-r from-green-100 to-emerald-100 px-6 py-3 rounded-full mb-6">
              <Zap className="w-6 h-6 text-green-600 mr-2" />
              <span className="font-semibold text-green-800">
                Simple. Smart. Successful.
              </span>
            </div>
            <h2 className="text-4xl md:text-6xl font-black text-gray-900 mb-6">
              Your Success Journey
              <span className="block bg-gradient-to-r from-green-500 to-emerald-500 bg-clip-text text-transparent">
                In 4 Simple Steps
              </span>
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
              Designed for India's diversity – works perfectly on any device, in
              multiple languages, even with slow internet.
            </p>
          </div>

          <div className="relative">
            {/* Connection Line */}
            <div className="hidden lg:block absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-orange-200 via-green-200 to-blue-200 transform -translate-y-1/2 z-0"></div>

            <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 relative z-10">
              {processSteps.map((step, index) => (
                <div key={index} className="group text-center">
                  {/* Step Number */}
                  <div className="w-24 h-24 bg-gradient-to-r from-orange-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-6 text-white text-2xl font-black shadow-xl group-hover:scale-110 transition-transform duration-300">
                    {step.step}
                  </div>

                  {/* Content Card */}
                  <div className="bg-white p-6 rounded-2xl shadow-lg hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-300 border border-gray-100 min-h-[300px]">
                    <div className="w-16 h-16 bg-gradient-to-r from-gray-100 to-gray-200 rounded-xl flex items-center justify-center mx-auto mb-4 text-gray-700 group-hover:scale-110 transition-transform duration-300">
                      {step.icon}
                    </div>
                    <h3 className="text-xl font-bold text-gray-900 mb-3">
                      {step.title}
                    </h3>
                    <p className="text-gray-600 mb-4 leading-relaxed">
                      {step.description}
                    </p>
                    <div className="space-y-2">
                      {step.features.map((feature, idx) => (
                        <div
                          key={idx}
                          className="flex items-center justify-center text-sm text-gray-500"
                        >
                          <CheckCircle className="w-4 h-4 text-green-500 mr-2" />
                          {feature}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Success Stories & Testimonials */}
      <section
        id="success"
        className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-blue-50 to-purple-50"
      >
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-20">
            <div className="inline-flex items-center bg-gradient-to-r from-yellow-100 to-orange-100 px-6 py-3 rounded-full mb-6">
              <Heart className="w-6 h-6 text-orange-600 mr-2" />
              <span className="font-semibold text-orange-800">
                Real Stories, Real Impact
              </span>
            </div>
            <h2 className="text-4xl md:text-6xl font-black text-gray-900 mb-6">
              Dreams Becoming
              <span className="block bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent">
                Success Stories
              </span>
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
              From remote villages to corporate boardrooms – hear from young
              Indians whose lives were transformed by InternNexus.
            </p>
          </div>

          {/* Testimonial Carousel */}
          <div className="relative max-w-4xl mx-auto">
            <div className="bg-white rounded-3xl shadow-2xl p-8 md:p-12 border border-gray-100 min-h-[400px]">
              <div className="text-center">
                {/* Avatar */}
                <div className="w-20 h-20 bg-gradient-to-r from-orange-400 to-pink-400 rounded-full flex items-center justify-center mx-auto mb-6 text-white text-2xl font-bold shadow-lg">
                  {testimonials[currentTestimonial].avatar}
                </div>

                {/* Quote */}
                <blockquote className="text-2xl md:text-3xl font-medium text-gray-900 mb-8 leading-relaxed italic">
                  "{testimonials[currentTestimonial].quote}"
                </blockquote>

                {/* Author Info */}
                <div className="border-t border-gray-200 pt-6">
                  <div className="font-bold text-xl text-gray-900 mb-1">
                    {testimonials[currentTestimonial].name}
                  </div>
                  <div className="text-gray-600 mb-1">
                    {testimonials[currentTestimonial].location} •{" "}
                    {testimonials[currentTestimonial].background}
                  </div>
                  <div className="text-sm font-semibold text-orange-600">
                    Now at {testimonials[currentTestimonial].company}
                  </div>
                </div>
              </div>
            </div>

            {/* Navigation Dots */}
            <div className="flex justify-center mt-8 space-x-2">
              {testimonials.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentTestimonial(index)}
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${
                    index === currentTestimonial
                      ? "bg-orange-500 scale-125"
                      : "bg-gray-300 hover:bg-gray-400"
                  }`}
                />
              ))}
            </div>
          </div>

          {/* Additional Impact Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-20">
            <div className="text-center bg-white p-8 rounded-2xl shadow-lg">
              <div className="text-4xl font-black text-green-600 mb-2">95%</div>
              <div className="text-gray-700 font-semibold">Success Rate</div>
              <div className="text-sm text-gray-500">
                Interns completing programs
              </div>
            </div>
            <div className="text-center bg-white p-8 rounded-2xl shadow-lg">
              <div className="text-4xl font-black text-blue-600 mb-2">78%</div>
              <div className="text-gray-700 font-semibold">Job Conversion</div>
              <div className="text-sm text-gray-500">
                Interns getting full-time offers
              </div>
            </div>
            <div className="text-center bg-white p-8 rounded-2xl shadow-lg">
              <div className="text-4xl font-black text-purple-600 mb-2">
                ₹24k
              </div>
              <div className="text-gray-700 font-semibold">Average Stipend</div>
              <div className="text-sm text-gray-500">Monthly compensation</div>
            </div>
          </div>
        </div>
      </section>

      {/* Final CTA Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
        {/* Animated Background */}
        <div className="absolute inset-0 bg-gradient-to-r from-orange-600 via-red-600 to-pink-600">
          <div className="absolute inset-0 bg-black/10"></div>
          <div className="absolute top-0 left-0 w-full h-full">
            <div className="absolute top-20 left-20 w-64 h-64 bg-white/10 rounded-full blur-3xl animate-pulse"></div>
            <div className="absolute bottom-20 right-20 w-96 h-96 bg-white/5 rounded-full blur-3xl animate-pulse delay-1000"></div>
          </div>
        </div>

        <div className="max-w-4xl mx-auto text-center relative z-10">
          <div className="inline-flex items-center bg-white/20 backdrop-blur-sm px-6 py-3 rounded-full mb-8">
            <Sparkles className="w-6 h-6 text-white mr-2" />
            <span className="font-semibold text-white">
              Join the Revolution
            </span>
          </div>

          <h2 className="text-4xl md:text-6xl font-black text-white mb-6 leading-tight">
            Your Dream Internship
            <span className="block">Awaits You</span>
          </h2>

          <p className="text-xl md:text-2xl text-white/90 mb-12 leading-relaxed max-w-3xl mx-auto">
            Don't let location, background, or experience hold you back.
            <span className="font-bold"> Your potential is limitless.</span>
            <br />
            Let our AI help you discover it.
          </p>

          <div className="flex flex-col sm:flex-row gap-6 justify-center">
            <button
              onClick={() => navigate({ to: "/register" })}
              className="group bg-white text-orange-600 px-12 py-5 rounded-2xl font-bold text-lg hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-300 flex items-center justify-center"
            >
              <Rocket className="mr-3 w-6 h-6 group-hover:animate-pulse" />
              Start Your Journey Free
              <ArrowRight className="ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform" />
            </button>
            <button
              onClick={() => navigate({ to: "/dashboard" })}
              className="group border-2 border-white/30 text-white px-12 py-5 rounded-2xl font-bold text-lg hover:bg-white/10 hover:border-white/50 transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center backdrop-blur-sm"
            >
              <Activity className="mr-3 w-6 h-6" />
              Explore Platform
              <ChevronRight className="ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform" />
            </button>
          </div>

          {/* Trust Indicators */}
          <div className="mt-16 grid grid-cols-2 md:grid-cols-4 gap-8 text-center">
            <div>
              <Shield className="w-8 h-8 text-white/80 mx-auto mb-2" />
              <div className="text-white font-semibold">100% Secure</div>
              <div className="text-white/70 text-sm">Government Verified</div>
            </div>
            <div>
              <Smartphone className="w-8 h-8 text-white/80 mx-auto mb-2" />
              <div className="text-white font-semibold">Mobile First</div>
              <div className="text-white/70 text-sm">Works Anywhere</div>
            </div>
            <div>
              <Languages className="w-8 h-8 text-white/80 mx-auto mb-2" />
              <div className="text-white font-semibold">Multi-Language</div>
              <div className="text-white/70 text-sm">12+ Languages</div>
            </div>
            <div>
              <Clock className="w-8 h-8 text-white/80 mx-auto mb-2" />
              <div className="text-white font-semibold">24/7 Support</div>
              <div className="text-white/70 text-sm">Always Available</div>
            </div>
          </div>
        </div>
      </section>

      {/* Enhanced Footer */}
      <footer className="bg-gray-900 text-white py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          {/* Main Footer Content */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-12">
            {/* Brand Section */}
            <div className="md:col-span-2">
              <div className="flex items-center mb-6">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 to-pink-500 rounded-2xl flex items-center justify-center mr-4">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div>
                  <span className="text-2xl font-bold">InternNexus</span>
                  <div className="text-sm text-gray-400">
                    Powered by PM Internship Scheme
                  </div>
                </div>
              </div>
              <p className="text-gray-300 leading-relaxed mb-6 max-w-md">
                Empowering India's youth through AI-driven internship matching.
                From rural villages to global opportunities.
              </p>
              <div className="flex space-x-4">
                <div className="w-10 h-10 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors cursor-pointer">
                  <span className="text-sm">🐦</span>
                </div>
                <div className="w-10 h-10 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors cursor-pointer">
                  <span className="text-sm">📘</span>
                </div>
                <div className="w-10 h-10 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors cursor-pointer">
                  <span className="text-sm">📸</span>
                </div>
              </div>
            </div>

            {/* Quick Links */}
            <div>
              <h4 className="text-lg font-semibold mb-4">Quick Links</h4>
              <div className="space-y-3">
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  About Us
                </a>
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  How It Works
                </a>
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  Success Stories
                </a>
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  Partners
                </a>
              </div>
            </div>

            {/* Support */}
            <div>
              <h4 className="text-lg font-semibold mb-4">Support</h4>
              <div className="space-y-3">
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  Help Center
                </a>
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  Contact Us
                </a>
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  Privacy Policy
                </a>
                <a
                  href="#"
                  className="block text-gray-300 hover:text-white transition-colors"
                >
                  Terms of Service
                </a>
              </div>
            </div>
          </div>

          {/* Bottom Section */}
          <div className="border-t border-gray-800 pt-8">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <div className="text-gray-400 text-sm mb-4 md:mb-0">
                © 2025 InternNexus. A Government of India Initiative under PM
                Internship Scheme.
              </div>
              <div className="flex items-center space-x-6">
                <div className="flex items-center text-sm text-gray-400">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                  All systems operational
                </div>
                <div className="text-sm text-gray-400">
                  🇮🇳 Made in India with ❤️
                </div>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}



================================================
FILE: frontend/src/routes/internship.$internshipId.tsx
================================================
import { createFileRoute, useNavigate } from "@tanstack/react-router";
import { useState } from "react";
import {
  ChevronRight,
  Users,
  Target,
  MapPin,
  BookOpen,
  Star,
  Menu,
  X,
  ArrowRight,
  CheckCircle,
  User,
  Settings,
  LogOut,
  Search,
  Filter,
  Heart,
  ExternalLink,
  Calendar,
  Clock,
  Briefcase,
  GraduationCap,
  Phone,
  Mail,
  Home,
  Building,
  Award,
  DollarSign,
  Eye,
  Share2,
  Bookmark,
  Shield,
  TrendingUp,
  Sparkles,
} from "lucide-react";

export const Route = createFileRoute("/internship/$internshipId")({
  component: InternshipDetails,
});

// Mock internship data (you can replace this with your actual data)
const mockInternships = [
  {
    id: 1,
    title: "Frontend Developer Intern",
    company: "TechCorp India",
    logo: "🚀",
    description: "Join our dynamic team to build cutting-edge web applications using React, TypeScript, and modern development practices. You'll work on real projects that impact millions of users.",
    location: "Mumbai, Maharashtra",
    duration: "3 months",
    stipend: "₹25,000/month",
    rating: 4.8,
    applicants: 156,
    featured: true,
    remote: false,
    skills: ["React", "JavaScript", "HTML/CSS", "TypeScript", "Git"],
    companySize: "500+ employees",
    industry: "Technology",
    founded: "2015",
  },
];

// Internship Card Component
export const InternshipCard = ({ internship, onClick }) => {
  return (
    <div
      onClick={onClick}
      className="bg-white/70 backdrop-blur-xl p-6 rounded-3xl shadow-xl border border-gray-200 hover:shadow-2xl hover:-translate-y-2 transition-all duration-300 cursor-pointer group"
    >
      <div className="flex flex-col md:flex-row gap-6">
        <div className="flex-1">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center space-x-4">
              <div className="text-4xl">{internship.logo}</div>
              <div>
                <div className="flex items-center gap-2">
                  <h3 className="text-xl font-bold text-gray-900 group-hover:text-orange-600 transition-colors">
                    {internship.title}
                  </h3>
                  {internship.featured && (
                    <span className="bg-gradient-to-r from-orange-100 to-pink-100 text-orange-700 px-3 py-1 rounded-full text-xs font-bold border border-orange-200">
                      Featured
                    </span>
                  )}
                  {internship.remote && (
                    <span className="bg-gradient-to-r from-green-100 to-emerald-100 text-green-700 px-3 py-1 rounded-full text-xs font-bold border border-green-200">
                      Remote
                    </span>
                  )}
                </div>
                <p className="text-gray-600 font-semibold">
                  {internship.company}
                </p>
              </div>
            </div>
          </div>

          <p className="text-gray-700 mb-4 leading-relaxed">
            {internship.description}
          </p>

          <div className="flex flex-wrap gap-2 mb-4">
            {internship.skills.map((skill, index) => (
              <span
                key={index}
                className="bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-700 px-3 py-2 rounded-full text-sm font-bold border border-blue-200 hover:shadow-md transform hover:-translate-y-1 transition-all duration-200"
              >
                {skill}
              </span>
            ))}
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 mb-4">
            <div className="flex items-center">
              <MapPin className="w-4 h-4 mr-2 text-orange-500" />
              {internship.location}
            </div>
            <div className="flex items-center">
              <Clock className="w-4 h-4 mr-2 text-green-500" />
              {internship.duration}
            </div>
            <div className="flex items-center">
              <Star className="w-4 h-4 mr-2 text-yellow-500" />
              {internship.rating} ({internship.applicants} applicants)
            </div>
            <div className="flex items-center text-green-600 font-bold">
              <DollarSign className="w-4 h-4 mr-1" />
              {internship.stipend}
            </div>
          </div>
        </div>

        <div className="flex flex-col justify-between">
          <div className="flex items-center space-x-2 mb-4">
            <button className="p-3 text-gray-400 hover:text-red-500 transition-colors bg-white/50 rounded-full hover:bg-red-50">
              <Heart className="w-5 h-5" />
            </button>
            <button className="p-3 text-gray-400 hover:text-blue-500 transition-colors bg-white/50 rounded-full hover:bg-blue-50">
              <Share2 className="w-5 h-5" />
            </button>
          </div>

          <button className="bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white px-8 py-4 rounded-2xl font-bold hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center">
            Apply Now
            <ExternalLink className="w-4 h-4 ml-2" />
          </button>
        </div>
      </div>
    </div>
  );
};

// Internship Details Component
const InternshipDetails = () => {
  const { internshipId } = Route.useParams();
  const navigate = useNavigate();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const internship = mockInternships.find((i) => i.id === Number(internshipId)) || mockInternships[0];
  const [hasApplied, setHasApplied] = useState(false);
  const [isSaved, setIsSaved] = useState(false);

  const handleApply = () => {
    setHasApplied(true);
  };

  const mockUser = {
    name: "Priya Sharma",
    email: "priya.sharma@example.com",
    location: "Mumbai, Maharashtra",
  };

  const companyStats = [
    {
      icon: <Building className="w-8 h-8" />,
      number: internship.companySize,
      label: "Company Size",
      description: "Growing team",
      color: "from-blue-400 to-indigo-500",
    },
    {
      icon: <TrendingUp className="w-8 h-8" />,
      number: internship.industry,
      label: "Industry",
      description: "Leading sector",
      color: "from-green-400 to-emerald-500",
    },
    {
      icon: <Calendar className="w-8 h-8" />,
      number: `Since ${internship.founded}`,
      label: "Established",
      description: "Years of experience",
      color: "from-purple-400 to-violet-500",
    },
    {
      icon: <Award className="w-8 h-8" />,
      number: `${internship.rating}/5`,
      label: "Rating",
      description: "Employee satisfaction",
      color: "from-orange-400 to-pink-500",
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-pink-50 to-green-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>

      {/* Enhanced Navigation with Glass Effect */}
      <nav className="fixed w-full z-50 bg-white/90 backdrop-blur-xl border-b border-orange-100 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div className="ml-4">
                  <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
                    InternNexus
                  </span>
                  <div className="text-xs text-gray-500 font-medium">
                    Powered by PM Scheme
                  </div>
                </div>
              </div>
            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:block">
              <div className="flex items-center space-x-8">
                <button
                  onClick={() => navigate({ to: "/dashboard" })}
                  className="flex items-center text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  <ChevronRight className="w-5 h-5 mr-2 rotate-180" />
                  Back to Dashboard
                </button>
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-orange-400 via-pink-400 to-green-400 rounded-full flex items-center justify-center shadow-md">
                    <span className="text-white font-bold">
                      {mockUser?.name?.charAt(0)}
                    </span>
                  </div>
                  <div className="text-left">
                    <div className="text-sm font-semibold text-gray-900">
                      {mockUser?.name}
                    </div>
                    <div className="text-xs text-gray-500">{mockUser?.location}</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="text-gray-700 hover:text-orange-600 transition-colors"
              >
                {isMenuOpen ? (
                  <X className="w-6 h-6" />
                ) : (
                  <Menu className="w-6 h-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Enhanced Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden bg-white/95 backdrop-blur-xl border-t border-orange-100 shadow-xl">
            <div className="px-4 pt-4 pb-6 space-y-4">
              <button
                onClick={() => {
                  navigate({ to: "/dashboard" });
                  setIsMenuOpen(false);
                }}
                className="flex items-center w-full text-left px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                <ChevronRight className="w-5 h-5 mr-2 rotate-180" />
                Back to Dashboard
              </button>
            </div>
          </div>
        )}
      </nav>

      {/* Main Content */}
      <div className="pt-24 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Hero Section */}
        <div className="mb-12">
          <div className="bg-white/70 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-200 overflow-hidden">
            {/* Company Header */}
            <div className="h-48 bg-gradient-to-r from-orange-500 via-pink-500 to-green-500 relative">
              <div className="absolute inset-0 bg-black/10"></div>
              <div className="absolute bottom-4 right-4 flex gap-2">
                <button 
                  onClick={() => setIsSaved(!isSaved)}
                  className={`p-3 rounded-full transition-all duration-300 ${
                    isSaved 
                      ? 'bg-white/30 text-white' 
                      : 'bg-white/20 backdrop-blur-sm text-white hover:bg-white/30'
                  }`}
                >
                  <Bookmark className="w-5 h-5" />
                </button>
                <button className="bg-white/20 backdrop-blur-sm text-white p-3 rounded-full hover:bg-white/30 transition-all duration-300">
                  <Share2 className="w-5 h-5" />
                </button>
              </div>
            </div>

            {/* Internship Info */}
            <div className="px-8 pb-8">
              <div className="flex flex-col lg:flex-row lg:items-end lg:justify-between -mt-16 relative">
                <div className="flex flex-col lg:flex-row lg:items-end space-y-4 lg:space-y-0 lg:space-x-6">
                  {/* Company Logo */}
                  <div className="relative">
                    <div className="w-32 h-32 bg-white rounded-3xl flex items-center justify-center shadow-2xl border-4 border-white">
                      <span className="text-6xl">{internship.logo}</span>
                    </div>
                    {internship.featured && (
                      <div className="absolute -top-2 -right-2 bg-gradient-to-r from-orange-500 to-pink-500 p-2 rounded-full shadow-lg">
                        <Star className="w-4 h-4 text-white" />
                      </div>
                    )}
                  </div>

                  {/* Internship Details */}
                  <div className="text-center lg:text-left">
                    <div className="flex items-center justify-center lg:justify-start gap-3 mb-2">
                      <h1 className="text-3xl lg:text-4xl font-black text-gray-900">
                        {internship.title}
                      </h1>
                      {internship.remote && (
                        <span className="bg-gradient-to-r from-green-100 to-emerald-100 text-green-700 px-3 py-1 rounded-full text-sm font-bold border border-green-200">
                          Remote
                        </span>
                      )}
                    </div>
                    <p className="text-xl font-bold text-gray-700 mb-2">{internship.company}</p>
                    <p className="text-gray-500 flex items-center justify-center lg:justify-start mb-2">
                      <MapPin className="w-4 h-4 mr-1" />
                      {internship.location}
                    </p>
                    <div className="flex items-center justify-center lg:justify-start space-x-6 text-sm">
                      <span className="flex items-center text-gray-500">
                        <Clock className="w-4 h-4 mr-1" />
                        {internship.duration}
                      </span>
                      <span className="flex items-center text-green-600 font-bold">
                        <DollarSign className="w-4 h-4 mr-1" />
                        {internship.stipend}
                      </span>
                      <span className="flex items-center text-yellow-600">
                        <Star className="w-4 h-4 mr-1" />
                        {internship.rating}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3 mt-6 lg:mt-0">
                  <button className="px-8 py-4 bg-white text-gray-700 rounded-2xl font-bold shadow-lg hover:bg-gray-50 hover:-translate-y-1 transition-all duration-300 flex items-center justify-center">
                    <Heart className="w-5 h-5 mr-2" />
                    Save
                  </button>
                  {!hasApplied ? (
                    <button
                      onClick={handleApply}
                      className="px-8 py-4 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white rounded-2xl font-bold hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center"
                    >
                      <Sparkles className="w-5 h-5 mr-2" />
                      Apply Now
                    </button>
                  ) : (
                    <button className="px-8 py-4 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-2xl font-bold shadow-xl flex items-center justify-center cursor-default">
                      <CheckCircle className="w-5 h-5 mr-2" />
                      Applied!
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Company Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
          {companyStats.map((stat, index) => (
            <div
              key={index}
              className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl border border-gray-200 hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 hover:border-transparent relative overflow-hidden"
            >
              <div className={`absolute inset-0 bg-gradient-to-br ${stat.color} opacity-0 group-hover:opacity-5 transition-opacity duration-500`}></div>
              <div className={`w-16 h-16 bg-gradient-to-r ${stat.color} rounded-2xl flex items-center justify-center mb-4 mx-auto text-white group-hover:scale-110 transition-transform duration-300 shadow-lg`}>
                {stat.icon}
              </div>
              <div className="font-black text-gray-900 mb-2 group-hover:scale-105 transition-transform text-center text-lg">
                {stat.number}
              </div>
              <div className="font-bold text-gray-800 mb-1 text-center">
                {stat.label}
              </div>
              <div className="text-sm text-gray-600 text-center">
                {stat.description}
              </div>
            </div>
          ))}
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* About Section */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">About This Internship</h2>
              <p className="text-gray-700 text-lg leading-relaxed mb-6">
                {internship.description}
              </p>
              <p className="text-gray-700 leading-relaxed">
                This internship offers an excellent opportunity to gain hands-on experience in a dynamic work environment. 
                You'll work closely with experienced professionals and contribute to real projects that make a meaningful impact. 
                We provide mentorship, learning resources, and the chance to build valuable industry connections.
              </p>
            </div>

            {/* Skills Section */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-gray-900">Required Skills</h3>
                <div className="inline-flex items-center bg-gradient-to-r from-blue-100 to-indigo-100 px-4 py-2 rounded-full">
                  <Target className="w-4 h-4 text-blue-600 mr-1" />
                  <span className="text-sm font-bold text-blue-800">
                    {internship.skills.length} Skills
                  </span>
                </div>
              </div>
              <div className="flex flex-wrap gap-3">
                {internship.skills.map((skill, index) => (
                  <span
                    key={index}
                    className="bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-700 px-4 py-3 rounded-2xl font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 border border-blue-200"
                  >
                    {skill}
                  </span>
                ))}
              </div>
            </div>

            {/* What You'll Learn */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">What You'll Learn</h3>
              <ul className="space-y-4 text-gray-700">
                <li className="flex items-start">
                  <CheckCircle className="w-6 h-6 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                  <span className="text-lg">Industry-standard tools and technologies</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="w-6 h-6 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                  <span className="text-lg">Professional communication and teamwork skills</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="w-6 h-6 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                  <span className="text-lg">Project management and time management</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="w-6 h-6 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                  <span className="text-lg">Real-world problem-solving techniques</span>
                </li>
                <li className="flex items-start">
                  <CheckCircle className="w-6 h-6 text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                  <span className="text-lg">Career development and networking opportunities</span>
                </li>
              </ul>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-8">
            {/* Application Status */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Application Status</h3>
              
              {hasApplied ? (
                <div className="text-center">
                  <div className="w-20 h-20 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg">
                    <CheckCircle className="w-10 h-10 text-white" />
                  </div>
                  <h4 className="text-xl font-bold text-gray-900 mb-2">
                    Application Submitted!
                  </h4>
                  <p className="text-gray-600 mb-6">
                    We'll notify you about the next steps via email within 2-3 business days.
                  </p>
                  <div className="bg-gradient-to-r from-green-100 to-emerald-100 p-4 rounded-2xl border border-green-200">
                    <p className="text-sm text-green-700 font-medium">
                      🎉 Your application is under review. Good luck!
                    </p>
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  <div className="text-center">
                    <div className="text-4xl font-black text-green-700 mb-2">
                      {internship.stipend}
                    </div>
                    <div className="text-green-600 font-bold text-lg">
                      Monthly Stipend
                    </div>
                  </div>
                  
                  <button
                    onClick={handleApply}
                    className="w-full bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white py-4 rounded-2xl font-bold text-lg hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center"
                  >
                    <Sparkles className="w-5 h-5 mr-2" />
                    Apply Now
                  </button>
                  
                  <div className="bg-gradient-to-r from-orange-100 to-pink-100 p-4 rounded-2xl border border-orange-200">
                    <p className="text-sm text-orange-700 font-medium text-center">
                      ⚡ Quick application process - takes less than 5 minutes!
                    </p>
                  </div>
                </div>
              )}
            </div>

            {/* Internship Details */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Details</h3>
              <div className="space-y-6">
                <div className="flex items-center">
                  <Clock className="w-6 h-6 text-gray-400 mr-4" />
                  <div>
                    <div className="font-bold text-gray-900">Duration</div>
                    <div className="text-gray-600">{internship.duration}</div>
                  </div>
                </div>

                <div className="flex items-center">
                  <Calendar className="w-6 h-6 text-gray-400 mr-4" />
                  <div>
                    <div className="font-bold text-gray-900">Start Date</div>
                    <div className="text-gray-600">Flexible</div>
                  </div>
                </div>

                <div className="flex items-center">
                  <Star className="w-6 h-6 text-yellow-500 mr-4" />
                  <div>
                    <div className="font-bold text-gray-900">Company Rating</div>
                    <div className="text-gray-600">{internship.rating} / 5.0</div>
                  </div>
                </div>

                <div className="flex items-center">
                  <Users className="w-6 h-6 text-gray-400 mr-4" />
                  <div>
                    <div className="font-bold text-gray-900">Applicants</div>
                    <div className="text-gray-600">{internship.applicants} applied</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Company Contact */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h4 className="text-2xl font-bold text-gray-900 mb-6">Company Contact</h4>
              <div className="space-y-4">
                <div className="flex items-center">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-100 to-indigo-100 rounded-xl flex items-center justify-center mr-4">
                    <Mail className="w-6 h-6 text-blue-600" />
                  </div>
                  <div>
                    <div className="font-bold text-gray-900">Email</div>
                    <div className="text-gray-600">careers@techcorp.com</div>
                  </div>
                </div>
                <div className="flex items-center">
                  <div className="w-12 h-12 bg-gradient-to-r from-green-100 to-emerald-100 rounded-xl flex items-center justify-center mr-4">
                    <Phone className="w-6 h-6 text-green-600" />
                  </div>
                  <div>
                    <div className="font-bold text-gray-900">Phone</div>
                    <div className="text-gray-600">+91 12345 67890</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Trust Indicators */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h4 className="text-2xl font-bold text-gray-900 mb-6">Why Choose This?</h4>
              <div className="space-y-4">
                <div className="flex items-center">
                  <Shield className="w-6 h-6 text-green-600 mr-3" />
                  <span className="text-gray-700 font-medium">Verified Company</span>
                </div>
                <div className="flex items-center">
                  <Award className="w-6 h-6 text-yellow-600 mr-3" />
                  <span className="text-gray-700 font-medium">Top Rated Internship</span>
                </div>
                <div className="flex items-center">
                  <TrendingUp className="w-6 h-6 text-blue-600 mr-3" />
                  <span className="text-gray-700 font-medium">High Success Rate</span>
                </div>
                <div className="flex items-center">
                  <Users className="w-6 h-6 text-purple-600 mr-3" />
                  <span className="text-gray-700 font-medium">Great Team Culture</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/routes/l2.tsx
================================================
import { useState } from "react";
import {
  RouterProvider,
  Outlet,
  useNavigate,
  useParams,
  createFileRoute,
} from "@tanstack/react-router";
import {
  ChevronRight,
  Users,
  Target,
  MapPin,
  BookOpen,
  Star,
  Menu,
  X,
  ArrowRight,
  CheckCircle,
  User,
  Settings,
  LogOut,
  Search,
  Filter,
  Heart,
  ExternalLink,
  Calendar,
  Clock,
  Briefcase,
  GraduationCap,
  Phone,
  Mail,
  Home,
} from "lucide-react";

// Mock user data
const mockUser = {
  name: "Priya Sharma",
  email: "priya.sharma@example.com",
  education: "B.Tech Computer Science",
  location: "Mumbai, Maharashtra",
  skills: ["JavaScript", "React", "Node.js"],
  interests: ["Technology", "Startups"],
};

// Mock internship data
export const mockInternships = [
  {
    id: 1,
    title: "Software Development Intern",
    company: "Tech Innovations Pvt Ltd",
    location: "Mumbai, Maharashtra",
    duration: "3 months",
    stipend: "₹15,000/month",
    skills: ["JavaScript", "React", "Node.js"],
    description:
      "Work on cutting-edge web applications and gain hands-on experience in full-stack development.",
    rating: 4.8,
    applicants: 45,
    logo: "🚀",
    remote: false,
    featured: true,
  },
  {
    id: 2,
    title: "Digital Marketing Intern",
    company: "Creative Solutions",
    location: "Pune, Maharashtra",
    duration: "2 months",
    stipend: "₹12,000/month",
    skills: ["Social Media", "Content Writing", "Analytics"],
    description:
      "Learn digital marketing strategies and execute campaigns for real clients.",
    rating: 4.6,
    applicants: 32,
    logo: "📊",
    remote: true,
    featured: false,
  },
  {
    id: 3,
    title: "UI/UX Design Intern",
    company: "Design Studio",
    location: "Bangalore, Karnataka",
    duration: "4 months",
    stipend: "₹18,000/month",
    skills: ["Figma", "Adobe XD", "User Research"],
    description:
      "Create beautiful and functional user interfaces for mobile and web applications.",
    rating: 4.9,
    applicants: 28,
    logo: "🎨",
    remote: true,
    featured: true,
  },
  {
    id: 4,
    title: "Data Analytics Intern",
    company: "DataCorp Analytics",
    location: "Hyderabad, Telangana",
    duration: "3 months",
    stipend: "₹16,000/month",
    skills: ["Python", "SQL", "Excel"],
    description:
      "Analyze large datasets and create insights for business decision making.",
    rating: 4.7,
    applicants: 38,
    logo: "📈",
    remote: false,
    featured: false,
  },
  {
    id: 5,
    title: "Content Writing Intern",
    company: "Media House Inc",
    location: "Delhi, NCR",
    duration: "2 months",
    stipend: "₹10,000/month",
    skills: ["Writing", "SEO", "Research"],
    description:
      "Create engaging content for websites, blogs, and social media platforms.",
    rating: 4.5,
    applicants: 52,
    logo: "✍️",
    remote: true,
    featured: false,
  },
];

// Root layout component that provides user state and renders the Outlet
function RootLayout() {
  const [user, setUser] = useState(null);

  return <Outlet context={{ user, setUser }} />;
}

export const Route = createFileRoute("/l2")({
  component: LandingPage,
});

// Landing Page Component
const LandingPage = () => {
  const navigate = useNavigate();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const features = [
    {
      icon: <Target className="w-8 h-8 text-orange-600" />,
      title: "AI-Powered Matching",
      description:
        "Smart algorithm matches you with the perfect internships based on your skills and interests",
    },
    {
      icon: <Users className="w-8 h-8 text-green-600" />,
      title: "Trusted Companies",
      description:
        "Connect with verified companies offering genuine internship opportunities",
    },
    {
      icon: <MapPin className="w-8 h-8 text-blue-600" />,
      title: "Location-Based",
      description:
        "Find internships in your preferred location or remote opportunities",
    },
    {
      icon: <BookOpen className="w-8 h-8 text-purple-600" />,
      title: "Skill Development",
      description:
        "Gain real-world experience and develop skills that employers value",
    },
  ];

  const stats = [
    { number: "10,000+", label: "Students Placed" },
    { number: "2,500+", label: "Companies" },
    { number: "500+", label: "Cities Covered" },
    { number: "95%", label: "Success Rate" },
  ];

  return (
    <div className="min-h-screen">
      {/* Navigation */}
      <nav className="bg-white/80 backdrop-blur-md fixed w-full z-50 border-b border-orange-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-green-500 rounded-xl flex items-center justify-center">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <span className="ml-3 text-2xl font-bold bg-gradient-to-r from-orange-600 to-green-600 bg-clip-text text-transparent">
                  InternNexus
                </span>
              </div>
            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:block">
              <div className="flex items-center space-x-8">
                <a
                  href="#features"
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Features
                </a>
                <a
                  href="#about"
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  About
                </a>
                <button
                  onClick={() => navigate({ to: "/login" })}
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Login
                </button>
                <button
                  onClick={() => navigate({ to: "/register" })}
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Register
                </button>
                <button
                  onClick={() => navigate({ to: "/dashboard" })}
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Dashboard
                </button>
                <button
                  onClick={() => navigate({ to: "/profile" })}
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Profile
                </button>
                <button
                  onClick={() => navigate({ to: "/onboarding" })}
                  className="bg-gradient-to-r from-orange-500 to-green-500 text-white px-6 py-2 rounded-full font-medium hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200"
                >
                  Onboarding
                </button>
              </div>
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="text-gray-700 hover:text-orange-600 transition-colors"
              >
                {isMenuOpen ? (
                  <X className="w-6 h-6" />
                ) : (
                  <Menu className="w-6 h-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden bg-white border-t border-orange-100">
            <div className="px-2 pt-2 pb-3 space-y-1">
              <a
                href="#features"
                className="block px-3 py-2 text-gray-700 hover:text-orange-600"
              >
                Features
              </a>
              <a
                href="#about"
                className="block px-3 py-2 text-gray-700 hover:text-orange-600"
              >
                About
              </a>
              <button
                onClick={() => navigate({ to: "/login" })}
                className="block w-full text-left px-3 py-2 text-gray-700 hover:text-orange-600"
              >
                Login
              </button>
              <button
                onClick={() => navigate({ to: "/register" })}
                className="block w-full mt-2 bg-gradient-to-r from-orange-500 to-green-500 text-white px-3 py-2 rounded-lg font-medium"
              >
                Get Started
              </button>
            </div>
          </div>
        )}
      </nav>

      {/* Hero Section */}
      <section className="pt-24 pb-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="text-center">
            <div className="flex justify-center mb-8">
              <div className="bg-gradient-to-r from-orange-100 to-green-100 px-4 py-2 rounded-full">
                <span className="text-sm font-medium text-orange-700">
                  🇮🇳 Powered by PM Internship Scheme
                </span>
              </div>
            </div>

            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
              Find Your Perfect
              <span className="block bg-gradient-to-r from-orange-600 to-green-600 bg-clip-text text-transparent">
                Internship Match
              </span>
            </h1>

            <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed">
              AI-powered recommendations connect you with internships that match
              your skills, interests, and aspirations. Start your career journey
              with confidence.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
              <button
                onClick={() => navigate({ to: "/register" })}
                className="bg-gradient-to-r from-orange-500 to-green-500 text-white px-8 py-4 rounded-full font-semibold text-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 flex items-center justify-center"
              >
                Start Your Journey
                <ArrowRight className="ml-2 w-5 h-5" />
              </button>
              <button className="border-2 border-gray-300 text-gray-700 px-8 py-4 rounded-full font-semibold text-lg hover:border-orange-500 hover:text-orange-500 transition-all duration-200">
                Watch Demo
              </button>
            </div>

            {/* Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-8 mb-16">
              {stats.map((stat, index) => (
                <div key={index} className="text-center">
                  <div className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-orange-600 to-green-600 bg-clip-text text-transparent mb-2">
                    {stat.number}
                  </div>
                  <div className="text-gray-600 font-medium">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-16 px-4 sm:px-6 lg:px-8 bg-white">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Why Choose InternNexus?
            </h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Our intelligent platform simplifies your internship search with
              cutting-edge technology
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <div
                key={index}
                className="bg-gradient-to-br from-white to-gray-50 p-6 rounded-2xl border border-gray-100 hover:shadow-xl hover:-translate-y-2 transition-all duration-300"
              >
                <div className="mb-4">{feature.icon}</div>
                <h3 className="text-xl font-semibold text-gray-900 mb-3">
                  {feature.title}
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  {feature.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          <div className="bg-gradient-to-r from-orange-500 to-green-500 rounded-3xl p-8 md:p-12 text-center">
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
              Ready to Start Your Career Journey?
            </h2>
            <p className="text-xl text-white/90 mb-8">
              Join thousands of students who found their dream internships
              through our platform
            </p>
            <button
              onClick={() => navigate({ to: "/register" })}
              className="bg-white text-orange-600 px-8 py-4 rounded-full font-semibold text-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 inline-flex items-center"
            >
              Get Started Now
              <ArrowRight className="ml-2 w-5 h-5" />
            </button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-center mb-8">
            <div className="w-10 h-10 bg-gradient-to-r from-orange-500 to-green-500 rounded-xl flex items-center justify-center">
              <span className="text-white font-bold text-xl">IN</span>
            </div>
            <span className="ml-3 text-2xl font-bold">InternNexus</span>
          </div>
          <div className="text-center text-gray-400">
            <p>
              &copy; 2025 InternNexus. Part of PM Internship Scheme Initiative.
            </p>
            <p className="mt-2">
              Empowering India's youth through technology and opportunity.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
};

// // Define routes
// const router = createBrowserRouter([
//   {
//     path: '/',
//     element: <RootLayout />,
//     children: [
//       {
//         path: '/',
//         element: <LandingPage />
//       },
//       {
//         path: '/login',
//         element: <LoginPage />
//       },
//       {
//         path: '/register',
//         element: <RegisterPage />
//       },
//       {
//         path: '/onboarding',
//         element: <OnboardingPage />
//       },
//       {
//         path: '/dashboard',
//         element: <Dashboard />
//       },
//       {
//         path: '/profile',
//         element: <ProfilePage />
//       },
//       {
//         path: '/internship/:internshipId',
//         element: <InternshipDetails />
//       }
//     ]
//   }
// ]);

// Main App Component
export default function App() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-green-50">
      <RouterProvider router={router} />
    </div>
  );
}



================================================
FILE: frontend/src/routes/login.tsx
================================================
import { useNavigate } from "@tanstack/react-router";
import { createFileRoute } from "@tanstack/react-router";
import { useState } from "react";
import {
  Mail,
  Lock,
  Eye,
  EyeOff,
  Sparkles,
  ArrowRight,
  Shield,
  Smartphone,
  Languages,
  Clock,
  Award,
} from "lucide-react";

export const Route = createFileRoute("/login")({
  component: LoginPage,
});

// Login Page Component
const LoginPage = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const handleLogin = (e) => {
    e.preventDefault();
    // setUser({
    //   name: "Priya Sharma",
    //   email: email,
    //   education: "B.Tech Computer Science",
    //   location: "Mumbai, Maharashtra",
    // });
    navigate({ to: "/dashboard" });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-pink-50 to-green-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>

      {/* Navigation */}
      <nav className="fixed w-full z-50 bg-white/90 backdrop-blur-xl border-b border-orange-100 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div className="ml-4">
                  <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
                    InternNexus
                  </span>
                  <div className="text-xs text-gray-500 font-medium">
                    Powered by PM Scheme
                  </div>
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-6">
              <button
                onClick={() => navigate({ to: "/" })}
                className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
              >
                Home
              </button>
              <button
                onClick={() => navigate({ to: "/register" })}
                className="bg-gradient-to-r from-orange-500 to-pink-500 text-white px-6 py-3 rounded-2xl font-bold hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300"
              >
                Sign Up
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="pt-32 pb-20 flex items-center justify-center px-4">
        <div className="max-w-md w-full">
          {/* Welcome Badge */}
          <div className="flex justify-center mb-8">
            <div className="inline-flex items-center bg-gradient-to-r from-orange-100 via-pink-100 to-green-100 border border-orange-200 px-6 py-3 rounded-full shadow-lg">
              <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-green-500 rounded-full flex items-center justify-center mr-3">
                <Sparkles className="w-4 h-4 text-white" />
              </div>
              <span className="text-sm font-semibold bg-gradient-to-r from-orange-600 to-green-600 bg-clip-text text-transparent">
                Welcome Back to InternNexus
              </span>
            </div>
          </div>

          {/* Main Card */}
          <div className="bg-white/70 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-200 p-8 mb-8">
            <div className="text-center mb-8">
              <div className="w-20 h-20 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl transform hover:scale-105 transition-transform duration-300">
                <span className="text-white font-black text-3xl">IN</span>
              </div>

              <h1 className="text-4xl md:text-5xl font-black text-gray-900 mb-4 leading-tight">
                Welcome
                <span className="block bg-gradient-to-r from-orange-500 via-pink-500 to-green-500 bg-clip-text text-transparent">
                  Back! 👋
                </span>
              </h1>

              <p className="text-lg text-gray-600 leading-relaxed">
                Continue your journey to find the perfect internship
              </p>
            </div>

            <form onSubmit={handleLogin} className="space-y-6">
              <div>
                <label className="block text-sm font-bold text-gray-700 mb-3">
                  Email Address
                </label>
                <div className="relative">
                  <Mail className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 bg-white shadow-inner text-lg"
                    placeholder="Enter your email address"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-bold text-gray-700 mb-3">
                  Password
                </label>
                <div className="relative">
                  <Lock className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type={showPassword ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full pl-12 pr-12 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 bg-white shadow-inner text-lg"
                    placeholder="Enter your password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    {showPassword ? (
                      <EyeOff className="w-5 h-5" />
                    ) : (
                      <Eye className="w-5 h-5" />
                    )}
                  </button>
                </div>
              </div>

              <div className="flex items-center justify-between">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    className="w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500 focus:ring-2"
                  />
                  <span className="ml-2 text-sm text-gray-600 font-medium">
                    Remember me
                  </span>
                </label>
                <button
                  type="button"
                  className="text-sm font-bold text-orange-600 hover:text-orange-700 transition-colors"
                >
                  Forgot Password?
                </button>
              </div>

              <button
                type="submit"
                className="group w-full bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white py-4 rounded-2xl font-black text-lg hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center"
              >
                Sign In to Your Account
                <ArrowRight className="ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform" />
              </button>
            </form>

            <div className="mt-8 text-center">
              <p className="text-gray-600 font-medium">
                Don't have an account?{" "}
                <button
                  onClick={() => navigate({ to: "/register" })}
                  className="font-bold text-transparent bg-gradient-to-r from-orange-600 to-pink-600 bg-clip-text hover:from-orange-700 hover:to-pink-700 transition-all duration-300"
                >
                  Create one now →
                </button>
              </p>
            </div>
          </div>

          {/* Trust Indicators */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
              <Shield className="w-6 h-6 text-green-600 mx-auto mb-2" />
              <div className="text-xs font-bold text-gray-700">100% Secure</div>
            </div>
            <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
              <Smartphone className="w-6 h-6 text-blue-600 mx-auto mb-2" />
              <div className="text-xs font-bold text-gray-700">
                Mobile Ready
              </div>
            </div>
            <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
              <Languages className="w-6 h-6 text-purple-600 mx-auto mb-2" />
              <div className="text-xs font-bold text-gray-700">
                Multi-Language
              </div>
            </div>
            <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
              <Clock className="w-6 h-6 text-orange-600 mx-auto mb-2" />
              <div className="text-xs font-bold text-gray-700">
                24/7 Support
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/routes/onboarding.tsx
================================================
import { createFileRoute, useNavigate } from "@tanstack/react-router";
import { GraduationCap, Heart, MapPin, Target, Sparkles, Brain, Rocket, Award } from "lucide-react";
import { useState } from "react";
import {
  ChevronRight,
  Users,
  BookOpen,
  Star,
  Menu,
  X,
  ArrowRight,
  CheckCircle,
  User,
  Settings,
  LogOut,
  Search,
  Filter,
  ExternalLink,
  Calendar,
  Clock,
  Briefcase,
  Phone,
  Mail,
  Home,
  Shield,
  Languages,
  Smartphone,
} from "lucide-react";

export const Route = createFileRoute("/onboarding")({
  component: OnboardingPage,
});

// Onboarding Page Component
const OnboardingPage = () => {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    education: "",
    field: "",
    skills: [],
    interests: [],
    location: "",
    experience: "",
  });

  const steps = [
    {
      number: 1,
      title: "Education",
      icon: <GraduationCap className="w-6 h-6" />,
      description: "Your academic background",
      color: "from-blue-500 to-indigo-500",
    },
    { 
      number: 2, 
      title: "Skills", 
      icon: <Target className="w-6 h-6" />,
      description: "Your expertise areas",
      color: "from-green-500 to-emerald-500",
    },
    { 
      number: 3, 
      title: "Interests", 
      icon: <Heart className="w-6 h-6" />,
      description: "Industries you love",
      color: "from-purple-500 to-violet-500",
    },
    { 
      number: 4, 
      title: "Preferences", 
      icon: <MapPin className="w-6 h-6" />,
      description: "Location & experience",
      color: "from-orange-500 to-pink-500",
    },
  ];

  const educationOptions = [
    { 
      value: "High School/12th Grade", 
      icon: "🎓", 
      description: "Secondary education completed" 
    },
    { 
      value: "Diploma", 
      icon: "📜", 
      description: "Technical or vocational training" 
    },
    { 
      value: "Bachelor's Degree", 
      icon: "🎯", 
      description: "Undergraduate studies" 
    },
    { 
      value: "Master's Degree", 
      icon: "🚀", 
      description: "Postgraduate education" 
    },
    { 
      value: "PhD", 
      icon: "🔬", 
      description: "Doctoral research" 
    },
  ];

  const skillOptions = [
    "JavaScript", "Python", "Java", "React", "Node.js", "SQL",
    "HTML/CSS", "Data Analysis", "Digital Marketing", "Content Writing",
    "Graphic Design", "UI/UX Design", "Project Management", "Communication",
    "Leadership", "Machine Learning", "Cloud Computing", "Mobile Development"
  ];

  const interestOptions = [
    "Technology", "Marketing", "Finance", "Healthcare", "Education",
    "Media", "Startups", "Non-profit", "Government", "Research",
    "Sales", "HR", "AI/ML", "Sustainability", "Gaming", "E-commerce"
  ];

  const handleSkillToggle = (skill) => {
    setFormData((prev) => ({
      ...prev,
      skills: prev.skills.includes(skill)
        ? prev.skills.filter((s) => s !== skill)
        : [...prev.skills, skill],
    }));
  };

  const handleInterestToggle = (interest) => {
    setFormData((prev) => ({
      ...prev,
      interests: prev.interests.includes(interest)
        ? prev.interests.filter((i) => i !== interest)
        : [...prev.interests, interest],
    }));
  };

  const handleNext = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    } else {
      // setUser({
      //   name: "Priya Sharma",
      //   email: "priya.sharma@example.com",
      //   ...formData,
      // });
      navigate({ to: "/dashboard" });
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-8">
            <div className="text-center mb-10">
              <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
                <GraduationCap className="w-10 h-10 text-white" />
              </div>
              <h2 className="text-4xl font-black text-gray-900 mb-4">
                Your Educational
                <span className="block bg-gradient-to-r from-blue-500 to-indigo-500 bg-clip-text text-transparent">
                  Background
                </span>
              </h2>
              <p className="text-lg text-gray-600 leading-relaxed max-w-md mx-auto">
                Help us understand your academic journey to find the perfect opportunities
              </p>
            </div>

            <div className="space-y-4">
              <label className="block text-sm font-bold text-gray-700 mb-4">
                Select Your Current Education Level
              </label>
              {educationOptions.map((option) => (
                <button
                  key={option.value}
                  onClick={() =>
                    setFormData({ ...formData, education: option.value })
                  }
                  className={`group w-full p-6 text-left border-2 rounded-3xl transition-all duration-300 ${
                    formData.education === option.value
                      ? "border-blue-500 bg-gradient-to-r from-blue-50 to-indigo-50 text-blue-700 shadow-lg transform -translate-y-1"
                      : "border-gray-200 hover:border-blue-300 hover:bg-blue-50/50 hover:-translate-y-1 hover:shadow-md"
                  }`}
                >
                  <div className="flex items-center space-x-4">
                    <div className="text-3xl">{option.icon}</div>
                    <div className="flex-1">
                      <div className="font-bold text-lg">{option.value}</div>
                      <div className="text-sm text-gray-500 mt-1">{option.description}</div>
                    </div>
                    {formData.education === option.value && (
                      <CheckCircle className="w-6 h-6 text-blue-500" />
                    )}
                  </div>
                </button>
              ))}
            </div>

            <div>
              <label className="block text-sm font-bold text-gray-700 mb-3">
                Field of Study (Optional)
              </label>
              <input
                type="text"
                value={formData.field}
                onChange={(e) =>
                  setFormData({ ...formData, field: e.target.value })
                }
                className="w-full px-6 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 text-lg shadow-inner"
                placeholder="e.g., Computer Science, Business Administration, etc."
              />
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-8">
            <div className="text-center mb-10">
              <div className="w-20 h-20 bg-gradient-to-r from-green-500 to-emerald-500 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
                <Target className="w-10 h-10 text-white" />
              </div>
              <h2 className="text-4xl font-black text-gray-900 mb-4">
                Showcase Your
                <span className="block bg-gradient-to-r from-green-500 to-emerald-500 bg-clip-text text-transparent">
                  Skills
                </span>
              </h2>
              <p className="text-lg text-gray-600 leading-relaxed max-w-md mx-auto">
                Select the skills that best represent your capabilities and expertise
              </p>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {skillOptions.map((skill) => (
                <button
                  key={skill}
                  onClick={() => handleSkillToggle(skill)}
                  className={`group p-4 text-sm font-bold rounded-2xl border-2 transition-all duration-300 ${
                    formData.skills.includes(skill)
                      ? "border-green-500 bg-gradient-to-r from-green-50 to-emerald-50 text-green-700 shadow-lg transform -translate-y-1"
                      : "border-gray-200 hover:border-green-300 text-gray-700 hover:bg-green-50/50 hover:-translate-y-1 hover:shadow-md"
                  }`}
                >
                  <div className="flex items-center justify-center space-x-2">
                    <span>{skill}</span>
                    {formData.skills.includes(skill) && (
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    )}
                  </div>
                </button>
              ))}
            </div>

            <div className="bg-gradient-to-r from-green-100 to-emerald-100 p-6 rounded-3xl border border-green-200">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl flex items-center justify-center">
                  <Sparkles className="w-6 h-6 text-white" />
                </div>
                <div>
                  <p className="font-bold text-green-800 mb-1">Pro Tip!</p>
                  <p className="text-sm text-green-700">
                    Select 3-8 skills that best represent your abilities. Quality over quantity!
                  </p>
                </div>
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-8">
            <div className="text-center mb-10">
              <div className="w-20 h-20 bg-gradient-to-r from-purple-500 to-violet-500 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
                <Heart className="w-10 h-10 text-white" />
              </div>
              <h2 className="text-4xl font-black text-gray-900 mb-4">
                Your Career
                <span className="block bg-gradient-to-r from-purple-500 to-violet-500 bg-clip-text text-transparent">
                  Interests
                </span>
              </h2>
              <p className="text-lg text-gray-600 leading-relaxed max-w-md mx-auto">
                Which industries and sectors excite you the most?
              </p>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {interestOptions.map((interest) => (
                <button
                  key={interest}
                  onClick={() => handleInterestToggle(interest)}
                  className={`group p-4 text-sm font-bold rounded-2xl border-2 transition-all duration-300 ${
                    formData.interests.includes(interest)
                      ? "border-purple-500 bg-gradient-to-r from-purple-50 to-violet-50 text-purple-700 shadow-lg transform -translate-y-1"
                      : "border-gray-200 hover:border-purple-300 text-gray-700 hover:bg-purple-50/50 hover:-translate-y-1 hover:shadow-md"
                  }`}
                >
                  <div className="flex items-center justify-center space-x-2">
                    <span>{interest}</span>
                    {formData.interests.includes(interest) && (
                      <CheckCircle className="w-4 h-4 text-purple-500" />
                    )}
                  </div>
                </button>
              ))}
            </div>

            <div className="bg-gradient-to-r from-purple-100 to-violet-100 p-6 rounded-3xl border border-purple-200">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-violet-500 rounded-2xl flex items-center justify-center">
                  <Brain className="w-6 h-6 text-white" />
                </div>
                <div>
                  <p className="font-bold text-purple-800 mb-1">Smart Matching</p>
                  <p className="text-sm text-purple-700">
                    Our AI will use these interests to find internships that align with your passions!
                  </p>
                </div>
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-8">
            <div className="text-center mb-10">
              <div className="w-20 h-20 bg-gradient-to-r from-orange-500 to-pink-500 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl">
                <MapPin className="w-10 h-10 text-white" />
              </div>
              <h2 className="text-4xl font-black text-gray-900 mb-4">
                Final
                <span className="block bg-gradient-to-r from-orange-500 to-pink-500 bg-clip-text text-transparent">
                  Preferences
                </span>
              </h2>
              <p className="text-lg text-gray-600 leading-relaxed max-w-md mx-auto">
                Tell us about your location and experience preferences
              </p>
            </div>

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-bold text-gray-700 mb-3">
                  Preferred Work Location
                </label>
                <input
                  type="text"
                  value={formData.location}
                  onChange={(e) =>
                    setFormData({ ...formData, location: e.target.value })
                  }
                  className="w-full px-6 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 text-lg shadow-inner"
                  placeholder="e.g., Mumbai, Maharashtra or Remote"
                />
              </div>

              <div>
                <label className="block text-sm font-bold text-gray-700 mb-3">
                  Previous Experience Level
                </label>
                <select
                  value={formData.experience}
                  onChange={(e) =>
                    setFormData({ ...formData, experience: e.target.value })
                  }
                  className="w-full px-6 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 text-lg shadow-inner bg-white"
                >
                  <option value="">Select your experience level</option>
                  <option value="none">🌱 No prior experience (Fresh start!)</option>
                  <option value="some">💡 Some project/freelance work</option>
                  <option value="internship">🎯 Previous internship experience</option>
                  <option value="part-time">💼 Part-time work experience</option>
                </select>
              </div>
            </div>

            <div className="bg-gradient-to-r from-orange-100 to-pink-100 p-6 rounded-3xl border border-orange-200">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 to-pink-500 rounded-2xl flex items-center justify-center">
                  <Rocket className="w-6 h-6 text-white" />
                </div>
                <div>
                  <p className="font-bold text-orange-800 mb-1">Almost Ready!</p>
                  <p className="text-sm text-orange-700">
                    You're one step away from discovering amazing internship opportunities tailored just for you!
                  </p>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-pink-50 to-green-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>

      {/* Enhanced Navigation */}
      <nav className="fixed w-full z-50 bg-white/90 backdrop-blur-xl border-b border-orange-100 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div className="ml-4">
                  <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
                    InternNexus
                  </span>
                  <div className="text-xs text-gray-500 font-medium">
                    Setup Your Profile
                  </div>
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-6">
              <div className="hidden md:flex items-center space-x-4 text-sm">
                <Shield className="w-4 h-4 text-green-600" />
                <span className="text-gray-600 font-medium">Secure & Private</span>
              </div>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="pt-32 pb-20 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Progress Section */}
        <div className="mb-12">
          <div className="text-center mb-8">
            <h1 className="text-3xl md:text-4xl font-black text-gray-900 mb-4">
              Let's Build Your
              <span className="block bg-gradient-to-r from-orange-500 via-pink-500 to-green-500 bg-clip-text text-transparent">
                Perfect Profile
              </span>
            </h1>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
              Help our AI understand you better to find the most suitable internship opportunities
            </p>
          </div>

          {/* Enhanced Progress Bar */}
          <div className="bg-white/70 backdrop-blur-xl rounded-3xl p-8 shadow-xl border border-gray-200 mb-8">
            <div className="flex justify-between items-center mb-6">
              {steps.map((step, index) => (
                <div key={step.number} className="flex flex-col items-center relative">
                  {index < steps.length - 1 && (
                    <div className="absolute top-6 left-8 w-16 md:w-24 h-1 bg-gray-200 -z-10">
                      <div 
                        className={`h-1 bg-gradient-to-r from-orange-500 to-pink-500 transition-all duration-500 ${
                          currentStep > step.number ? 'w-full' : 'w-0'
                        }`}
                      ></div>
                    </div>
                  )}
                  
                  <div
                    className={`w-12 h-12 rounded-2xl flex items-center justify-center transition-all duration-300 shadow-lg ${
                      currentStep >= step.number
                        ? `bg-gradient-to-r ${step.color} text-white transform scale-110`
                        : "bg-gray-200 text-gray-400"
                    }`}
                  >
                    {currentStep > step.number ? (
                      <CheckCircle className="w-6 h-6" />
                    ) : (
                      step.icon
                    )}
                  </div>
                  
                  <div className="mt-3 text-center">
                    <div className={`text-sm font-bold ${
                      currentStep >= step.number ? 'text-gray-900' : 'text-gray-400'
                    }`}>
                      {step.title}
                    </div>
                    <div className="text-xs text-gray-500 hidden md:block">
                      {step.description}
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="relative">
              <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                <div
                  className="h-2 bg-gradient-to-r from-orange-500 via-pink-500 to-green-500 rounded-full transition-all duration-500 ease-out"
                  style={{ width: `${(currentStep / 4) * 100}%` }}
                ></div>
              </div>
              <div className="text-center mt-3">
                <span className="text-sm font-bold text-gray-600">
                  Step {currentStep} of 4 Complete
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Step Content */}
        <div className="mb-12">
          <div className="bg-white/70 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-200 p-8 md:p-12">
            {renderStep()}
          </div>
        </div>

        {/* Navigation */}
        <div className="flex justify-between items-center">
          <button
            onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
            disabled={currentStep === 1}
            className={`px-8 py-4 rounded-2xl font-bold transition-all duration-300 ${
              currentStep === 1
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 hover:bg-gray-50 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
            }`}
          >
            <ChevronRight className="w-5 h-5 inline mr-2 rotate-180" />
            Previous
          </button>

          <div className="hidden md:flex items-center space-x-2 text-sm text-gray-500">
            <Clock className="w-4 h-4" />
            <span>Takes about 3 minutes</span>
          </div>

          <button
            onClick={handleNext}
            className="group px-8 py-4 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white rounded-2xl font-bold shadow-xl hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 flex items-center"
          >
            {currentStep === 4 ? (
              <>
                Complete Setup
                <Rocket className="ml-2 w-5 h-5 group-hover:animate-pulse" />
              </>
            ) : (
              <>
                Next Step
                <ArrowRight className="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" />
              </>
            )}
          </button>
        </div>

        {/* Trust Indicators */}
        <div className="mt-16 grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
            <Shield className="w-6 h-6 text-green-600 mx-auto mb-2" />
            <div className="text-xs font-bold text-gray-700">100% Secure</div>
          </div>
          <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
            <Smartphone className="w-6 h-6 text-blue-600 mx-auto mb-2" />
            <div className="text-xs font-bold text-gray-700">Mobile Ready</div>
          </div>
          <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
            <Languages className="w-6 h-6 text-purple-600 mx-auto mb-2" />
            <div className="text-xs font-bold text-gray-700">Multi-Language</div>
          </div>
          <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl">
            <Award className="w-6 h-6 text-orange-600 mx-auto mb-2" />
            <div className="text-xs font-bold text-gray-700">PM Verified</div>
          </div>
        </div>
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/routes/profile.tsx
================================================
import { useNavigate } from "@tanstack/react-router";
import { createFileRoute } from "@tanstack/react-router";
import { useState } from "react";
import {
  ChevronRight,
  Users,
  Target,
  MapPin,
  BookOpen,
  Star,
  Menu,
  X,
  ArrowRight,
  CheckCircle,
  User,
  Settings,
  LogOut,
  Search,
  Filter,
  Heart,
  ExternalLink,
  Calendar,
  Clock,
  Briefcase,
  GraduationCap,
  Phone,
  Mail,
  Home,
  Sparkles,
  Award,
  Edit3,
  Camera,
  Shield,
  Bell,
  Lock,
  Eye,
  Save,
} from "lucide-react";

export const Route = createFileRoute("/profile")({
  component: ProfilePage,
});

const mockUser = {
  name: "Priya Sharma",
  email: "priya.sharma@example.com",
  education: "B.Tech Computer Science",
  location: "Mumbai, Maharashtra",
  skills: ["JavaScript", "React", "Node.js", "Python", "SQL"],
  interests: ["Technology", "Startups", "AI/ML"],
  joinedDate: "March 2024",
  completedApplications: 8,
  profileViews: 42,
  skillsEndorsed: 15,
};

// Profile Page Component
const ProfilePage = () => {
  const user = mockUser;
  const navigate = useNavigate();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState({
    name: user?.name || "",
    email: user?.email || "",
    education: user?.education || "",
    location: user?.location || "",
    skills: user?.skills || [],
    interests: user?.interests || [],
  });

  const handleSave = () => {
    // setUser(editForm);
    setIsEditing(false);
  };

  const profileStats = [
    {
      icon: <Briefcase className="w-8 h-8" />,
      number: user.completedApplications,
      label: "Applications",
      description: "Submitted this month",
      color: "from-orange-400 to-pink-500",
    },
    {
      icon: <Eye className="w-8 h-8" />,
      number: user.profileViews,
      label: "Profile Views",
      description: "In the last 30 days",
      color: "from-green-400 to-emerald-500",
    },
    {
      icon: <Award className="w-8 h-8" />,
      number: user.skillsEndorsed,
      label: "Skills Endorsed",
      description: "By colleagues",
      color: "from-blue-400 to-indigo-500",
    },
    {
      icon: <Target className="w-8 h-8" />,
      number: "95%",
      label: "Profile Score",
      description: "Completion rate",
      color: "from-purple-400 to-violet-500",
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-pink-50 to-green-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>

      {/* Enhanced Navigation with Glass Effect */}
      <nav className="fixed w-full z-50 bg-white/90 backdrop-blur-xl border-b border-orange-100 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div className="ml-4">
                  <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
                    InternNexus
                  </span>
                  <div className="text-xs text-gray-500 font-medium">
                    Powered by PM Scheme
                  </div>
                </div>
              </div>
            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:block">
              <div className="flex items-center space-x-8">
                <button
                  onClick={() => navigate({ to: "/dashboard" })}
                  className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
                >
                  Dashboard
                </button>
                <button
                  onClick={() => navigate({ to: "/profile" })}
                  className="text-orange-600 hover:text-orange-700 transition-colors font-bold border-b-2 border-orange-600"
                >
                  Profile
                </button>
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-orange-400 via-pink-400 to-green-400 rounded-full flex items-center justify-center shadow-md">
                    <span className="text-white font-bold">
                      {user?.name?.charAt(0)}
                    </span>
                  </div>
                  <div className="text-left">
                    <div className="text-sm font-semibold text-gray-900">
                      {user?.name}
                    </div>
                    <div className="text-xs text-gray-500">{user?.location}</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="text-gray-700 hover:text-orange-600 transition-colors"
              >
                {isMenuOpen ? (
                  <X className="w-6 h-6" />
                ) : (
                  <Menu className="w-6 h-6" />
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Enhanced Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden bg-white/95 backdrop-blur-xl border-t border-orange-100 shadow-xl">
            <div className="px-4 pt-4 pb-6 space-y-4">
              <div className="flex items-center space-x-3 pb-4 border-b border-orange-100">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-400 via-pink-400 to-green-400 rounded-full flex items-center justify-center shadow-lg">
                  <span className="text-white font-bold text-lg">
                    {user?.name?.charAt(0)}
                  </span>
                </div>
                <div>
                  <div className="font-bold text-gray-900">{user?.name}</div>
                  <div className="text-sm text-gray-500">{user?.email}</div>
                  <div className="text-xs text-gray-400">{user?.location}</div>
                </div>
              </div>
              
              <button
                onClick={() => {
                  navigate({ to: "/dashboard" });
                  setIsMenuOpen(false);
                }}
                className="block w-full text-left px-4 py-3 text-gray-700 hover:text-orange-600 hover:bg-orange-50 rounded-xl transition-all"
              >
                Dashboard
              </button>
              
              <button
                onClick={() => {
                  navigate({ to: "/profile" });
                  setIsMenuOpen(false);
                }}
                className="block w-full text-left px-4 py-3 text-orange-600 font-bold hover:bg-orange-50 rounded-xl transition-all"
              >
                Profile
              </button>
            </div>
          </div>
        )}
      </nav>

      {/* Main Content */}
      <div className="pt-24 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Profile Header Section */}
        <div className="mb-12">
          <div className="bg-white/70 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-200 overflow-hidden">
            {/* Cover Section */}
            <div className="h-48 bg-gradient-to-r from-orange-500 via-pink-500 to-green-500 relative">
              <div className="absolute inset-0 bg-black/10"></div>
              <div className="absolute bottom-4 right-4">
                <button className="bg-white/20 backdrop-blur-sm text-white p-3 rounded-full hover:bg-white/30 transition-all duration-300">
                  <Camera className="w-5 h-5" />
                </button>
              </div>
            </div>

            {/* Profile Info */}
            <div className="px-8 pb-8">
              <div className="flex flex-col md:flex-row md:items-end md:justify-between -mt-16 relative">
                <div className="flex flex-col md:flex-row md:items-end space-y-4 md:space-y-0 md:space-x-6">
                  {/* Avatar */}
                  <div className="relative">
                    <div className="w-32 h-32 bg-gradient-to-r from-orange-400 via-pink-400 to-green-400 rounded-full flex items-center justify-center shadow-2xl border-4 border-white">
                      <span className="text-4xl font-bold text-white">
                        {user?.name?.charAt(0)}
                      </span>
                    </div>
                    <button className="absolute bottom-2 right-2 bg-white p-2 rounded-full shadow-lg hover:shadow-xl transition-all duration-300">
                      <Camera className="w-4 h-4 text-gray-600" />
                    </button>
                  </div>

                  {/* User Info */}
                  <div className="text-center md:text-left">
                    <h1 className="text-3xl md:text-4xl font-black text-gray-900 mb-2">
                      {user?.name}
                    </h1>
                    <p className="text-lg text-gray-600 mb-1">{user?.education}</p>
                    <p className="text-gray-500 flex items-center justify-center md:justify-start">
                      <MapPin className="w-4 h-4 mr-1" />
                      {user?.location}
                    </p>
                    <div className="mt-3 flex items-center justify-center md:justify-start space-x-4 text-sm text-gray-500">
                      <span className="flex items-center">
                        <Calendar className="w-4 h-4 mr-1" />
                        Joined {user?.joinedDate}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3 mt-6 md:mt-0">
                  <button
                    onClick={() => setIsEditing(!isEditing)}
                    className={`px-6 py-3 rounded-2xl font-bold transition-all duration-300 shadow-lg ${
                      isEditing
                        ? "bg-gray-200 text-gray-700 hover:bg-gray-300"
                        : "bg-gradient-to-r from-orange-500 to-pink-500 text-white hover:shadow-xl transform hover:-translate-y-1"
                    }`}
                  >
                    <Edit3 className="w-5 h-5 inline mr-2" />
                    {isEditing ? "Cancel Edit" : "Edit Profile"}
                  </button>
                  <button className="px-6 py-3 bg-white text-gray-700 rounded-2xl font-bold shadow-lg hover:bg-gray-50 hover:-translate-y-1 transition-all duration-300">
                    <Settings className="w-5 h-5 inline mr-2" />
                    Settings
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Profile Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
          {profileStats.map((stat, index) => (
            <div
              key={index}
              className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl border border-gray-200 hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 hover:border-transparent relative overflow-hidden"
            >
              <div className={`absolute inset-0 bg-gradient-to-br ${stat.color} opacity-0 group-hover:opacity-5 transition-opacity duration-500`}></div>
              <div className={`w-16 h-16 bg-gradient-to-r ${stat.color} rounded-2xl flex items-center justify-center mb-4 mx-auto text-white group-hover:scale-110 transition-transform duration-300 shadow-lg`}>
                {stat.icon}
              </div>
              <div className="text-4xl font-black text-gray-900 mb-2 group-hover:scale-105 transition-transform text-center">
                {stat.number}
              </div>
              <div className="font-bold text-gray-800 mb-1 text-center">
                {stat.label}
              </div>
              <div className="text-sm text-gray-600 text-center">
                {stat.description}
              </div>
            </div>
          ))}
        </div>

        {/* Profile Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Profile Information */}
          <div className="lg:col-span-2 space-y-8">
            {/* About Section */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">About</h2>
                {!isEditing && (
                  <button
                    onClick={() => setIsEditing(true)}
                    className="text-gray-500 hover:text-orange-600 transition-colors"
                  >
                    <Edit3 className="w-5 h-5" />
                  </button>
                )}
              </div>

              {isEditing ? (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-bold text-gray-700 mb-2">
                        Full Name
                      </label>
                      <input
                        type="text"
                        value={editForm.name}
                        onChange={(e) =>
                          setEditForm({ ...editForm, name: e.target.value })
                        }
                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-bold text-gray-700 mb-2">
                        Email Address
                      </label>
                      <input
                        type="email"
                        value={editForm.email}
                        onChange={(e) =>
                          setEditForm({ ...editForm, email: e.target.value })
                        }
                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-bold text-gray-700 mb-2">
                        Education
                      </label>
                      <input
                        type="text"
                        value={editForm.education}
                        onChange={(e) =>
                          setEditForm({ ...editForm, education: e.target.value })
                        }
                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-bold text-gray-700 mb-2">
                        Location
                      </label>
                      <input
                        type="text"
                        value={editForm.location}
                        onChange={(e) =>
                          setEditForm({ ...editForm, location: e.target.value })
                        }
                        className="w-full px-4 py-3 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300"
                      />
                    </div>
                  </div>

                  <div className="flex justify-end space-x-4">
                    <button
                      onClick={() => setIsEditing(false)}
                      className="px-6 py-3 bg-gray-200 text-gray-700 rounded-2xl font-bold hover:bg-gray-300 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleSave}
                      className="px-6 py-3 bg-gradient-to-r from-orange-500 to-green-500 text-white rounded-2xl font-bold hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-300"
                    >
                      <Save className="w-5 h-5 inline mr-2" />
                      Save Changes
                    </button>
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                      <h3 className="text-lg font-bold text-gray-900 mb-4">
                        Personal Information
                      </h3>
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-bold text-gray-500 mb-1">
                            Full Name
                          </label>
                          <p className="text-gray-900 font-medium">
                            {user?.name}
                          </p>
                        </div>
                        <div>
                          <label className="block text-sm font-bold text-gray-500 mb-1">
                            Email
                          </label>
                          <p className="text-gray-900">{user?.email}</p>
                        </div>
                        <div>
                          <label className="block text-sm font-bold text-gray-500 mb-1">
                            Location
                          </label>
                          <p className="text-gray-900">{user?.location}</p>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h3 className="text-lg font-bold text-gray-900 mb-4">
                        Education
                      </h3>
                      <div>
                        <label className="block text-sm font-bold text-gray-500 mb-1">
                          Current Education
                        </label>
                        <p className="text-gray-900 font-medium">
                          {user?.education}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Skills Section */}
            {user?.skills && user.skills.length > 0 && (
              <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-2xl font-bold text-gray-900">Skills</h3>
                  <div className="inline-flex items-center bg-gradient-to-r from-blue-100 to-indigo-100 px-4 py-2 rounded-full">
                    <Star className="w-4 h-4 text-blue-600 mr-1" />
                    <span className="text-sm font-bold text-blue-800">
                      {user.skills.length} Skills
                    </span>
                  </div>
                </div>
                <div className="flex flex-wrap gap-3">
                  {user.skills.map((skill, index) => (
                    <span
                      key={index}
                      className="group bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-700 px-4 py-3 rounded-2xl text-sm font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 border border-blue-200"
                    >
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Interests Section */}
            {user?.interests && user.interests.length > 0 && (
              <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-2xl font-bold text-gray-900">Interests</h3>
                  <div className="inline-flex items-center bg-gradient-to-r from-green-100 to-emerald-100 px-4 py-2 rounded-full">
                    <Heart className="w-4 h-4 text-green-600 mr-1" />
                    <span className="text-sm font-bold text-green-800">
                      {user.interests.length} Interests
                    </span>
                  </div>
                </div>
                <div className="flex flex-wrap gap-3">
                  {user.interests.map((interest, index) => (
                    <span
                      key={index}
                      className="group bg-gradient-to-r from-green-100 to-emerald-100 text-green-700 px-4 py-3 rounded-2xl text-sm font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 border border-green-200"
                    >
                      {interest}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-8">
            {/* Quick Actions */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Quick Actions</h3>
              <div className="space-y-4">
                <button
                  onClick={() => navigate({ to: "/dashboard" })}
                  className="w-full flex items-center px-4 py-3 bg-gradient-to-r from-orange-500 to-pink-500 text-white rounded-2xl font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300"
                >
                  <Home className="w-5 h-5 mr-3" />
                  Go to Dashboard
                </button>
                <button className="w-full flex items-center px-4 py-3 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-2xl font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300">
                  <Settings className="w-5 h-5 mr-3" />
                  Account Settings
                </button>
                <button className="w-full flex items-center px-4 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-2xl font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300">
                  <Bell className="w-5 h-5 mr-3" />
                  Notifications
                </button>
                <button className="w-full flex items-center px-4 py-3 bg-gradient-to-r from-purple-500 to-violet-500 text-white rounded-2xl font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300">
                  <Shield className="w-5 h-5 mr-3" />
                  Privacy Settings
                </button>
              </div>
            </div>

            {/* Security Section */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Security</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-gray-700 font-medium">Password</span>
                  <button className="text-orange-600 hover:text-orange-700 font-bold">
                    Change
                  </button>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-700 font-medium">Two-Factor Auth</span>
                  <div className="w-10 h-6 bg-green-500 rounded-full relative">
                    <div className="w-4 h-4 bg-white rounded-full absolute top-1 right-1 shadow-sm"></div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-700 font-medium">Login Alerts</span>
                  <div className="w-10 h-6 bg-green-500 rounded-full relative">
                    <div className="w-4 h-4 bg-white rounded-full absolute top-1 right-1 shadow-sm"></div>
                  </div>
                </div>
              </div>
            </div>

            {/* Danger Zone */}
            <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-red-200">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Danger Zone</h3>
              <div className="space-y-4">
                <button className="w-full flex items-center justify-center px-4 py-3 bg-red-50 text-red-600 border border-red-200 rounded-2xl font-bold hover:bg-red-100 transition-all duration-300">
                  <LogOut className="w-5 h-5 mr-3" />
                  Sign Out
                </button>
                <button className="w-full flex items-center justify-center px-4 py-3 bg-red-100 text-red-700 border border-red-300 rounded-2xl font-bold hover:bg-red-200 transition-all duration-300">
                  Delete Account
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/routes/register.tsx
================================================
import { createFileRoute, useNavigate } from "@tanstack/react-router";
import { useState } from "react";
import {
  User,
  Mail,
  Lock,
  Eye,
  EyeOff,
  Sparkles,
  ArrowRight,
  Shield,
  Smartphone,
  Languages,
  Clock,
  Award,
  CheckCircle,
  Rocket,
  Target,
} from 'lucide-react';

export const Route = createFileRoute("/register")({
  component: RegisterPage,
});

// Register Page Component
const RegisterPage = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [acceptedTerms, setAcceptedTerms] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    navigate({ to: "/onboarding" });
  };

  const benefits = [
    {
      icon: <Target className="w-6 h-6" />,
      title: "AI-Powered Matching",
      description: "95% accuracy in internship recommendations",
      color: "from-blue-500 to-indigo-500",
    },
    {
      icon: <Rocket className="w-6 h-6" />,
      title: "Fast Track Career",
      description: "78% job conversion rate for our interns",
      color: "from-green-500 to-emerald-500",
    },
    {
      icon: <Award className="w-6 h-6" />,
      title: "Premium Support",
      description: "24/7 guidance throughout your journey",
      color: "from-purple-500 to-violet-500",
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-pink-50 to-green-50 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-orange-400/20 to-pink-400/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-to-r from-green-400/10 to-emerald-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>

      {/* Navigation */}
      <nav className="fixed w-full z-50 bg-white/90 backdrop-blur-xl border-b border-orange-100 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
                  <span className="text-white font-bold text-xl">IN</span>
                </div>
                <div className="ml-4">
                  <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
                    InternNexus
                  </span>
                  <div className="text-xs text-gray-500 font-medium">
                    Powered by PM Scheme
                  </div>
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-6">
              <button
                onClick={() => navigate({ to: "/" })}
                className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
              >
                Home
              </button>
              <button
                onClick={() => navigate({ to: "/login" })}
                className="text-gray-700 hover:text-orange-600 transition-colors font-medium"
              >
                Sign In
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="pt-32 pb-20 px-4">
        <div className="max-w-4xl mx-auto">
          {/* Welcome Badge */}
          <div className="flex justify-center mb-8">
            <div className="inline-flex items-center bg-gradient-to-r from-orange-100 via-pink-100 to-green-100 border border-orange-200 px-6 py-3 rounded-full shadow-lg">
              <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-green-500 rounded-full flex items-center justify-center mr-3">
                <Sparkles className="w-4 h-4 text-white" />
              </div>
              <span className="text-sm font-semibold bg-gradient-to-r from-orange-600 to-green-600 bg-clip-text text-transparent">
                Join 1.2 Lakh+ Students Already Transforming Their Careers
              </span>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
            {/* Left Column - Form */}
            <div>
              <div className="bg-white/70 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-200 p-8">
                <div className="text-center mb-8">
                  <div className="w-20 h-20 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-xl transform hover:scale-105 transition-transform duration-300">
                    <span className="text-white font-black text-3xl">IN</span>
                  </div>
                  
                  <h1 className="text-4xl md:text-5xl font-black text-gray-900 mb-4 leading-tight">
                    Start Your
                    <span className="block bg-gradient-to-r from-orange-500 via-pink-500 to-green-500 bg-clip-text text-transparent">
                      Dream Journey
                    </span>
                  </h1>
                  
                  <p className="text-lg text-gray-600 leading-relaxed">
                    Create your account and unlock unlimited opportunities
                  </p>
                </div>

                <form onSubmit={handleSubmit} className="space-y-6">
                  <div>
                    <label className="block text-sm font-bold text-gray-700 mb-3">
                      Full Name
                    </label>
                    <div className="relative">
                      <User className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <input
                        type="text"
                        value={formData.name}
                        onChange={(e) =>
                          setFormData({ ...formData, name: e.target.value })
                        }
                        className="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 bg-white shadow-inner text-lg"
                        placeholder="Enter your full name"
                        required
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-bold text-gray-700 mb-3">
                      Email Address
                    </label>
                    <div className="relative">
                      <Mail className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <input
                        type="email"
                        value={formData.email}
                        onChange={(e) =>
                          setFormData({ ...formData, email: e.target.value })
                        }
                        className="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 bg-white shadow-inner text-lg"
                        placeholder="Enter your email address"
                        required
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-bold text-gray-700 mb-3">
                      Password
                    </label>
                    <div className="relative">
                      <Lock className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <input
                        type={showPassword ? "text" : "password"}
                        value={formData.password}
                        onChange={(e) =>
                          setFormData({ ...formData, password: e.target.value })
                        }
                        className="w-full pl-12 pr-12 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 bg-white shadow-inner text-lg"
                        placeholder="Create a strong password"
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                      >
                        {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                      </button>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-bold text-gray-700 mb-3">
                      Confirm Password
                    </label>
                    <div className="relative">
                      <Lock className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                      <input
                        type={showConfirmPassword ? "text" : "password"}
                        value={formData.confirmPassword}
                        onChange={(e) =>
                          setFormData({ ...formData, confirmPassword: e.target.value })
                        }
                        className="w-full pl-12 pr-12 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 bg-white shadow-inner text-lg"
                        placeholder="Confirm your password"
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                      >
                        {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                      </button>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3">
                    <input
                      type="checkbox"
                      checked={acceptedTerms}
                      onChange={(e) => setAcceptedTerms(e.target.checked)}
                      className="w-5 h-5 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500 focus:ring-2 mt-1"
                      required
                    />
                    <label className="text-sm text-gray-600 font-medium leading-relaxed">
                      I agree to the{" "}
                      <button type="button" className="text-orange-600 hover:text-orange-700 font-bold">
                        Terms of Service
                      </button>{" "}
                      and{" "}
                      <button type="button" className="text-orange-600 hover:text-orange-700 font-bold">
                        Privacy Policy
                      </button>
                    </label>
                  </div>

                  <button
                    type="submit"
                    className="group w-full bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white py-4 rounded-2xl font-black text-lg hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center"
                  >
                    Create My Account
                    <ArrowRight className="ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform" />
                  </button>
                </form>

                <div className="mt-8 text-center">
                  <p className="text-gray-600 font-medium">
                    Already have an account?{" "}
                    <button
                      onClick={() => navigate({ to: "/login" })}
                      className="font-bold text-transparent bg-gradient-to-r from-orange-600 to-pink-600 bg-clip-text hover:from-orange-700 hover:to-pink-700 transition-all duration-300"
                    >
                      Sign in here →
                    </button>
                  </p>
                </div>
              </div>
            </div>

            {/* Right Column - Benefits */}
            <div className="space-y-8">
              <div className="text-center">
                <h2 className="text-3xl md:text-4xl font-black text-gray-900 mb-4">
                  Why Choose
                  <span className="block bg-gradient-to-r from-orange-500 to-pink-500 bg-clip-text text-transparent">
                    InternNexus?
                  </span>
                </h2>
                <p className="text-lg text-gray-600 leading-relaxed">
                  Join thousands of students who've transformed their careers
                </p>
              </div>

              {benefits.map((benefit, index) => (
                <div
                  key={index}
                  className="group bg-white/70 backdrop-blur-xl p-6 rounded-3xl shadow-xl border border-gray-200 hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300"
                >
                  <div className="flex items-start space-x-4">
                    <div className={`w-14 h-14 bg-gradient-to-r ${benefit.color} rounded-2xl flex items-center justify-center text-white group-hover:scale-110 transition-transform duration-300`}>
                      {benefit.icon}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-xl font-bold text-gray-900 mb-2">
                        {benefit.title}
                      </h3>
                      <p className="text-gray-600 leading-relaxed">
                        {benefit.description}
                      </p>
                    </div>
                  </div>
                </div>
              ))}

              {/* Success Stats */}
              <div className="bg-white/70 backdrop-blur-xl p-8 rounded-3xl shadow-xl border border-gray-200">
                <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">
                  Our Success Story
                </h3>
                <div className="grid grid-cols-3 gap-6 text-center">
                  <div>
                    <div className="text-3xl font-black text-green-600 mb-1">95%</div>
                    <div className="text-sm font-bold text-gray-700">Success Rate</div>
                  </div>
                  <div>
                    <div className="text-3xl font-black text-blue-600 mb-1">78%</div>
                    <div className="text-sm font-bold text-gray-700">Job Conversion</div>
                  </div>
                  <div>
                    <div className="text-3xl font-black text-purple-600 mb-1">₹24k</div>
                    <div className="text-sm font-bold text-gray-700">Avg. Stipend</div>
                  </div>
                </div>
              </div>

              {/* Trust Indicators */}
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl text-center">
                  <Shield className="w-8 h-8 text-green-600 mx-auto mb-2" />
                  <div className="text-sm font-bold text-gray-700">Government Verified</div>
                </div>
                <div className="bg-white/50 backdrop-blur-sm p-4 rounded-2xl text-center">
                  <Award className="w-8 h-8 text-orange-600 mx-auto mb-2" />
                  <div className="text-sm font-bold text-gray-700">PM Scheme Partner</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};



================================================
FILE: frontend/src/routes/sink.tsx
================================================
import { createFileRoute } from "@tanstack/react-router";

export const Route = createFileRoute("/sink")({
  component: RouteComponent,
});

function RouteComponent() {
  return (
    <section className="flex flex-col gap-10 items-center mt-10">
      <div className="flex items-center">
        <div className="flex-shrink-0 flex items-center">
          <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
            <span className="text-white font-bold text-xl">IN</span>
          </div>
          <div className="ml-4">
            <span className="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">
              InternNexus
            </span>
            <div className="text-xs text-gray-500 font-medium">
              Powered by PM Scheme
            </div>
          </div>
        </div>
      </div>

      <div className="flex items-center">
        <div className="flex-shrink-0 flex items-center">
          <div className="w-12 h-12 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300">
            <span className="text-white font-bold text-xl">IN</span>
          </div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: frontend/src/utils/utils.ts
================================================
// Mock user data
export const mockUser = {
  name: "Priya Sharma",
  email: "priya.sharma@example.com",
  education: "B.Tech Computer Science",
  location: "Mumbai, Maharashtra",
  skills: ["JavaScript", "React", "Node.js"],
  interests: ["Technology", "Startups"],
};

// Mock internship data
export const mockInternships = [
  {
    id: 1,
    title: "Software Development Intern",
    company: "Tech Innovations Pvt Ltd",
    location: "Mumbai, Maharashtra",
    duration: "3 months",
    stipend: "₹15,000/month",
    skills: ["JavaScript", "React", "Node.js"],
    description:
      "Work on cutting-edge web applications and gain hands-on experience in full-stack development.",
    rating: 4.8,
    applicants: 45,
    logo: "🚀",
    remote: false,
    featured: true,
  },
  {
    id: 2,
    title: "Digital Marketing Intern",
    company: "Creative Solutions",
    location: "Pune, Maharashtra",
    duration: "2 months",
    stipend: "₹12,000/month",
    skills: ["Social Media", "Content Writing", "Analytics"],
    description:
      "Learn digital marketing strategies and execute campaigns for real clients.",
    rating: 4.6,
    applicants: 32,
    logo: "📊",
    remote: true,
    featured: false,
  },
  {
    id: 3,
    title: "UI/UX Design Intern",
    company: "Design Studio",
    location: "Bangalore, Karnataka",
    duration: "4 months",
    stipend: "₹18,000/month",
    skills: ["Figma", "Adobe XD", "User Research"],
    description:
      "Create beautiful and functional user interfaces for mobile and web applications.",
    rating: 4.9,
    applicants: 28,
    logo: "🎨",
    remote: true,
    featured: true,
  },
  {
    id: 4,
    title: "Data Analytics Intern",
    company: "DataCorp Analytics",
    location: "Hyderabad, Telangana",
    duration: "3 months",
    stipend: "₹16,000/month",
    skills: ["Python", "SQL", "Excel"],
    description:
      "Analyze large datasets and create insights for business decision making.",
    rating: 4.7,
    applicants: 38,
    logo: "📈",
    remote: false,
    featured: false,
  },
  {
    id: 5,
    title: "Content Writing Intern",
    company: "Media House Inc",
    location: "Delhi, NCR",
    duration: "2 months",
    stipend: "₹10,000/month",
    skills: ["Writing", "SEO", "Research"],
    description:
      "Create engaging content for websites, blogs, and social media platforms.",
    rating: 4.5,
    applicants: 52,
    logo: "✍️",
    remote: true,
    featured: false,
  },
];


